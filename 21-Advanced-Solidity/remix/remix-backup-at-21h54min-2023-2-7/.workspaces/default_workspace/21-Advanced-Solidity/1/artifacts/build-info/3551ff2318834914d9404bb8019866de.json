{
	"id": "3551ff2318834914d9404bb8019866de",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.5.17",
	"solcLongVersion": "0.5.17+commit.d19bba13",
	"input": {
		"language": "Solidity",
		"sources": {
			"21-Advanced-Solidity/1/05-Stu_XP_Token.sol": {
				"content": "/*\r\nXP_Token\r\n\r\nInstructions\r\n\r\nComplete the following steps:\r\n\r\n1. Open up the Remix IDE, and create a new contract called `XP_Token.sol`.\r\n\r\n2. Set the `pragma` to any version from 0.5.0 to 0.5.17.\r\n\r\n3. Add the following import statement just below the `pragma` and above the `contract XP_Token` definition:\r\n\r\n  ```solidity\r\n  import \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\";\r\n  ```\r\n\r\n4. After you define and name your contract `XP_Token`, add the following as the first line of code in your smart contract:\r\n\r\n  ```solidity\r\n  using SafeMath for uint;\r\n  ```\r\n\r\n5. Next, add the following contract variables:\r\n\r\n    * A `address payable` called `owner`. Set this to `msg.sender`. Since this is only called once during the deployment, you will become the contract owner.\r\n\r\n    * A `string` called `symbol`. Set this to `XPT` and make sure that it is `public`. Setting the symbol will allow wallets like MetaMask to recognize your token's symbol/ticker.\r\n\r\n    * Set an `exchange_rate` variable to equal the number of tokens to be distributed per `wei`. Make sure the variable is a `uint public` type!\r\n\r\n6. Add the data structure `mapping`:\r\n\r\n    * Create a new `mapping` that pairs `address` to `uint`. Name this variable `balances`.\r\n\r\n7. Add a new function called `balance` that is a `public view` that `returns(uint)`:\r\n\r\n    * This function should return the `balances` of `msg.sender` by accessing the `balances` mapping, using `msg.sender` as the index/selector/key.\r\n\r\n8. Add a new `transfer` function that accepts `address recipient` and `uint value` as parameters:\r\n\r\n    * Using the SafeMath library, this function, subtract `value` from the balance of `msg.sender` in the `balances` mapping.\r\n\r\n    * Again using the SafeMath library, add the `value` to the `recipient` balance in the mapping.\r\n\r\n9. Users will now need a way to purchase new `XPT` tokens! Add a `public payable` function called `purchase`. It does not need any parameters. Within the function:\r\n\r\n    * Using the SafeMath library, calculate a new `uint` called `amount` by multiplying `msg.value` with the `exchange_rate`. This equation will calculate the number of tokens to distribute.\r\n\r\n    * Again using the SafeMath library, add the `amount` to the balance of `msg.sender`.\r\n\r\n    * At the end of the function, transfer the `msg.value` to the `owner` address. (Remember, `owner` must be set to `payable` to call `.transfer` on it)\r\n\r\n10. Finally, since you as the company owner will need to create new tokens when you need to, add a new function called `mint`:\r\n\r\n    * Use the same parameters as the `transfer` function you defined earlier.\r\n\r\n    * At the beginning of the function, `require` that the `msg.sender` is equal to `owner`. Make sure to put an error message in the `require`.\r\n\r\n    * Using the SafeMath library, add the `value` you'd like to the `recipient` address' balance in the mapping.\r\n\r\n11. Test out your contract by deploying and calling the functions that Remix exposes. Try minting some tokens using a Remix address, then sending some to another Remix address. Be sure to confirm that you do not have an integer underflow error!\r\n\r\n*/\r\n\r\npragma solidity ^0.5.0;\r\n\r\n// @TODO: import the SafeMath library via Github URL\r\n// YOUR CODE HERE!\r\nimport \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\";\r\n\r\ncontract XP_Token {\r\n    // @TODO: add the \"using SafeMath...\" line here to link the library to all uint types\r\n    // YOUR CODE HERE!\r\n    using SafeMath for uint;\r\n\r\n    // @TODO: add the three contract variables: owner, symbol, and exchange_rate\r\n    address payable owner = msg.sender;\r\n    string public symbol = \"XPT\";\r\n    uint public exchange_rate = 100;\r\n\r\n\r\n\r\n\r\n    // @TODO: add the data structure mapping for the user balances\r\n    // YOUR CODE HERE!\r\n    mapping (address => uint) balances;\r\n\r\n    // @TODO: Add a new function called `balance`\r\n    // YOUR CODE HERE!\r\n    function balance() public view returns(uint){\r\n        return balances[msg.sender];\r\n    }\r\n\r\n    // @TODO: Add a new function called `transfer`. Use the SafeMath library.\r\n    // YOUR CODE HERE!\r\n    function transfer (address recipient, uint value) public {\r\n        balances[msg.sender] = balances[msg.sender].sub(value);\r\n        balances[recipient] = balances[recipient].add(value);\r\n        \r\n    }\r\n\r\n\r\n\r\n    // @TODO: Add a new function called `purchase`. Use the SafeMath library.\r\n    // YOUR CODE HERE!\r\n\r\n    function purchase() public payable {\r\n        uint amount = msg.value.mul(exchange_rate);\r\n\r\n        balances[msg.sender] = balances[msg.sender].add(amount);\r\n        owner.transfer(msg.value);\r\n    }\r\n    // @TODO: Add a new function called `mint`. Use the SafeMath library.\r\n    // YOUR CODE HERE!\r\n    function mint(address recipient, uint value) public{\r\n        require (msg.sender == owner,\"You are not the owner!!!\");\r\n\r\n        balances[recipient] = balances[recipient].add(value);\r\n    } \r\n      \r\n}\r\n"
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol": {
				"content": "pragma solidity ^0.5.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"21-Advanced-Solidity/1/05-Stu_XP_Token.sol": {
				"XP_Token": {
					"abi": [
						{
							"constant": true,
							"inputs": [],
							"name": "balance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [],
							"name": "exchange_rate",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "mint",
							"outputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [],
							"name": "purchase",
							"outputs": [],
							"payable": true,
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"methods": {}
					},
					"evm": {
						"assembly": "    /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":3436:5051  contract XP_Token {\r... */\n  mstore(0x40, 0x80)\n    /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":3714:3724  msg.sender */\n  caller\n    /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":3690:3724  address payable owner = msg.sender */\n  0x00\n  dup1\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":3731:3759  string public symbol = \"XPT\" */\n  mload(0x40)\n  dup1\n  0x40\n  add\n  0x40\n  mstore\n  dup1\n  0x03\n  dup2\n  mstore\n  0x20\n  add\n  0x5850540000000000000000000000000000000000000000000000000000000000\n  dup2\n  mstore\n  pop\n  0x01\n  swap1\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  swap1\n  tag_1\n  swap3\n  swap2\n  swap1\n  tag_2\n  jump\t// in\ntag_1:\n  pop\n    /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":3794:3797  100 */\n  0x64\n    /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":3766:3797  uint public exchange_rate = 100 */\n  0x02\n  sstore\n    /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":3436:5051  contract XP_Token {\r... */\n  callvalue\n    /* \"--CODEGEN--\":8:17   */\n  dup1\n    /* \"--CODEGEN--\":5:7   */\n  iszero\n  tag_3\n  jumpi\n    /* \"--CODEGEN--\":30:31   */\n  0x00\n    /* \"--CODEGEN--\":27:28   */\n  dup1\n    /* \"--CODEGEN--\":20:32   */\n  revert\n    /* \"--CODEGEN--\":5:7   */\ntag_3:\n    /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":3436:5051  contract XP_Token {\r... */\n  pop\n  jump(tag_4)\ntag_2:\n  dup3\n  dup1\n  sload\n  0x01\n  dup2\n  0x01\n  and\n  iszero\n  0x0100\n  mul\n  sub\n  and\n  0x02\n  swap1\n  div\n  swap1\n  0x00\n  mstore\n  keccak256(0x00, 0x20)\n  swap1\n  0x1f\n  add\n  0x20\n  swap1\n  div\n  dup2\n  add\n  swap3\n  dup3\n  0x1f\n  lt\n  tag_6\n  jumpi\n  dup1\n  mload\n  not(0xff)\n  and\n  dup4\n  dup1\n  add\n  or\n  dup6\n  sstore\n  jump(tag_5)\ntag_6:\n  dup3\n  dup1\n  add\n  0x01\n  add\n  dup6\n  sstore\n  dup3\n  iszero\n  tag_5\n  jumpi\n  swap2\n  dup3\n  add\ntag_7:\n  dup3\n  dup2\n  gt\n  iszero\n  tag_8\n  jumpi\n  dup3\n  mload\n  dup3\n  sstore\n  swap2\n  0x20\n  add\n  swap2\n  swap1\n  0x01\n  add\n  swap1\n  jump(tag_7)\ntag_8:\ntag_5:\n  pop\n  swap1\n  pop\n  tag_9\n  swap2\n  swap1\n  tag_10\n  jump\t// in\ntag_9:\n  pop\n  swap1\n  jump\t// out\ntag_10:\n  tag_11\n  swap2\n  swap1\ntag_12:\n  dup1\n  dup3\n  gt\n  iszero\n  tag_13\n  jumpi\n  0x00\n  dup2\n  0x00\n  swap1\n  sstore\n  pop\n  0x01\n  add\n  jump(tag_12)\ntag_13:\n  pop\n  swap1\n  jump\ntag_11:\n  swap1\n  jump\t// out\ntag_4:\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":3436:5051  contract XP_Token {\r... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x171ef0b2\n      eq\n      tag_2\n      jumpi\n      dup1\n      0x40c10f19\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x64edfbf0\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_5\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_6\n      jumpi\n      dup1\n      0xb69ef8a8\n      eq\n      tag_7\n      jumpi\n    tag_1:\n      0x00\n      dup1\n      revert\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":3766:3797  uint public exchange_rate = 100 */\n    tag_2:\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_8\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_8:\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":3766:3797  uint public exchange_rate = 100 */\n      pop\n      tag_9\n      tag_10\n      jump\t// in\n    tag_9:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4848:5039  function mint(address recipient, uint value) public{\r... */\n    tag_3:\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_11\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_11:\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4848:5039  function mint(address recipient, uint value) public{\r... */\n      pop\n      tag_12\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x40\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_13\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_13:\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4848:5039  function mint(address recipient, uint value) public{\r... */\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_14\n      jump\t// in\n    tag_12:\n      stop\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4543:4743  function purchase() public payable {\r... */\n    tag_4:\n      tag_15\n      tag_16\n      jump\t// in\n    tag_15:\n      stop\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":3731:3759  string public symbol = \"XPT\" */\n    tag_5:\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_17\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_17:\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":3731:3759  string public symbol = \"XPT\" */\n      pop\n      tag_18\n      tag_19\n      jump\t// in\n    tag_18:\n      mload(0x40)\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      dup4\n      dup2\n      dup2\n      mload\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      dup1\n      dup4\n      dup4\n        /* \"--CODEGEN--\":23:24   */\n      0x00\n        /* \"--CODEGEN--\":8:108   */\n    tag_20:\n        /* \"--CODEGEN--\":33:36   */\n      dup4\n        /* \"--CODEGEN--\":30:31   */\n      dup2\n        /* \"--CODEGEN--\":27:37   */\n      lt\n        /* \"--CODEGEN--\":8:108   */\n      iszero\n      tag_22\n      jumpi\n        /* \"--CODEGEN--\":99:100   */\n      dup1\n        /* \"--CODEGEN--\":94:97   */\n      dup3\n        /* \"--CODEGEN--\":90:101   */\n      add\n        /* \"--CODEGEN--\":84:102   */\n      mload\n        /* \"--CODEGEN--\":80:81   */\n      dup2\n        /* \"--CODEGEN--\":75:78   */\n      dup5\n        /* \"--CODEGEN--\":71:82   */\n      add\n        /* \"--CODEGEN--\":64:103   */\n      mstore\n        /* \"--CODEGEN--\":52:54   */\n      0x20\n        /* \"--CODEGEN--\":49:50   */\n      dup2\n        /* \"--CODEGEN--\":45:55   */\n      add\n        /* \"--CODEGEN--\":40:55   */\n      swap1\n      pop\n        /* \"--CODEGEN--\":8:108   */\n      jump(tag_20)\n    tag_22:\n        /* \"--CODEGEN--\":12:26   */\n      pop\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":3731:3759  string public symbol = \"XPT\" */\n      pop\n      pop\n      pop\n      swap1\n      pop\n      swap1\n      dup2\n      add\n      swap1\n      0x1f\n      and\n      dup1\n      iszero\n      tag_23\n      jumpi\n      dup1\n      dup3\n      sub\n      dup1\n      mload\n      0x01\n      dup4\n      0x20\n      sub\n      0x0100\n      exp\n      sub\n      not\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n    tag_23:\n      pop\n      swap3\n      pop\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4223:4426  function transfer (address recipient, uint value) public {\r... */\n    tag_6:\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_24\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_24:\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4223:4426  function transfer (address recipient, uint value) public {\r... */\n      pop\n      tag_25\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x40\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_26\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_26:\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4223:4426  function transfer (address recipient, uint value) public {\r... */\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_27\n      jump\t// in\n    tag_25:\n      stop\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4022:4112  function balance() public view returns(uint){\r... */\n    tag_7:\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_28\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_28:\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4022:4112  function balance() public view returns(uint){\r... */\n      pop\n      tag_29\n      tag_30\n      jump\t// in\n    tag_29:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":3766:3797  uint public exchange_rate = 100 */\n    tag_10:\n      sload(0x02)\n      dup2\n      jump\t// out\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4848:5039  function mint(address recipient, uint value) public{\r... */\n    tag_14:\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4933:4938  owner */\n      0x00\n      dup1\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4919:4938  msg.sender == owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4919:4929  msg.sender */\n      caller\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4919:4938  msg.sender == owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4910:4966  require (msg.sender == owner,\"You are not the owner!!!\") */\n      tag_32\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x18\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x596f7520617265206e6f7420746865206f776e65722121210000000000000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_32:\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":5001:5031  balances[recipient].add(value) */\n      tag_33\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":5025:5030  value */\n      dup2\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":5001:5009  balances */\n      0x03\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":5001:5020  balances[recipient] */\n      0x00\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":5010:5019  recipient */\n      dup6\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":5001:5020  balances[recipient] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":5001:5024  balances[recipient].add */\n      tag_34\n      swap1\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":5001:5031  balances[recipient].add(value) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_33:\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4979:4987  balances */\n      0x03\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4979:4998  balances[recipient] */\n      0x00\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4988:4997  recipient */\n      dup5\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4979:4998  balances[recipient] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4979:5031  balances[recipient] = balances[recipient].add(value) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4848:5039  function mint(address recipient, uint value) public{\r... */\n      pop\n      pop\n      jump\t// out\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4543:4743  function purchase() public payable {\r... */\n    tag_16:\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4589:4600  uint amount */\n      0x00\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4603:4631  msg.value.mul(exchange_rate) */\n      tag_36\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4617:4630  exchange_rate */\n      sload(0x02)\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4603:4612  msg.value */\n      callvalue\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4603:4616  msg.value.mul */\n      tag_37\n      swap1\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4603:4631  msg.value.mul(exchange_rate) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_36:\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4589:4631  uint amount = msg.value.mul(exchange_rate) */\n      swap1\n      pop\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4667:4699  balances[msg.sender].add(amount) */\n      tag_38\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4692:4698  amount */\n      dup2\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4667:4675  balances */\n      0x03\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4667:4687  balances[msg.sender] */\n      0x00\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4676:4686  msg.sender */\n      caller\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4667:4687  balances[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4667:4691  balances[msg.sender].add */\n      tag_34\n      swap1\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4667:4699  balances[msg.sender].add(amount) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_38:\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4644:4652  balances */\n      0x03\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4644:4664  balances[msg.sender] */\n      0x00\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4653:4663  msg.sender */\n      caller\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4644:4664  balances[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4644:4699  balances[msg.sender] = balances[msg.sender].add(amount) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4710:4715  owner */\n      0x00\n      dup1\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4710:4724  owner.transfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4710:4735  owner.transfer(msg.value) */\n      0x08fc\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4725:4734  msg.value */\n      callvalue\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4710:4735  owner.transfer(msg.value) */\n      swap1\n      dup2\n      iszero\n      mul\n      swap1\n      mload(0x40)\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup9\n      dup9\n      call\n      swap4\n      pop\n      pop\n      pop\n      pop\n      iszero\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_39\n      jumpi\n        /* \"--CODEGEN--\":45:61   */\n      returndatasize\n        /* \"--CODEGEN--\":42:43   */\n      0x00\n        /* \"--CODEGEN--\":39:40   */\n      dup1\n        /* \"--CODEGEN--\":24:62   */\n      returndatacopy\n        /* \"--CODEGEN--\":77:93   */\n      returndatasize\n        /* \"--CODEGEN--\":74:75   */\n      0x00\n        /* \"--CODEGEN--\":67:94   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_39:\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4710:4735  owner.transfer(msg.value) */\n      pop\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4543:4743  function purchase() public payable {\r... */\n      pop\n      jump\t// out\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":3731:3759  string public symbol = \"XPT\" */\n    tag_19:\n      0x01\n      dup1\n      sload\n      0x01\n      dup2\n      0x01\n      and\n      iszero\n      0x0100\n      mul\n      sub\n      and\n      0x02\n      swap1\n      div\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      0x01\n      dup2\n      0x01\n      and\n      iszero\n      0x0100\n      mul\n      sub\n      and\n      0x02\n      swap1\n      div\n      dup1\n      iszero\n      tag_40\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_41\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_40)\n    tag_41:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_42:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_42\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_40:\n      pop\n      pop\n      pop\n      pop\n      pop\n      dup2\n      jump\t// out\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4223:4426  function transfer (address recipient, uint value) public {\r... */\n    tag_27:\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4314:4345  balances[msg.sender].sub(value) */\n      tag_44\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4339:4344  value */\n      dup2\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4314:4322  balances */\n      0x03\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4314:4334  balances[msg.sender] */\n      0x00\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4323:4333  msg.sender */\n      caller\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4314:4334  balances[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4314:4338  balances[msg.sender].sub */\n      tag_45\n      swap1\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4314:4345  balances[msg.sender].sub(value) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_44:\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4291:4299  balances */\n      0x03\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4291:4311  balances[msg.sender] */\n      0x00\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4300:4310  msg.sender */\n      caller\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4291:4311  balances[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4291:4345  balances[msg.sender] = balances[msg.sender].sub(value) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4378:4408  balances[recipient].add(value) */\n      tag_46\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4402:4407  value */\n      dup2\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4378:4386  balances */\n      0x03\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4378:4397  balances[recipient] */\n      0x00\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4387:4396  recipient */\n      dup6\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4378:4397  balances[recipient] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4378:4401  balances[recipient].add */\n      tag_34\n      swap1\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4378:4408  balances[recipient].add(value) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_46:\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4356:4364  balances */\n      0x03\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4356:4375  balances[recipient] */\n      0x00\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4365:4374  recipient */\n      dup5\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4356:4375  balances[recipient] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4356:4408  balances[recipient] = balances[recipient].add(value) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4223:4426  function transfer (address recipient, uint value) public {\r... */\n      pop\n      pop\n      jump\t// out\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4022:4112  function balance() public view returns(uint){\r... */\n    tag_30:\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4061:4065  uint */\n      0x00\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4084:4092  balances */\n      0x03\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4084:4104  balances[msg.sender] */\n      0x00\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4093:4103  msg.sender */\n      caller\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4084:4104  balances[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4077:4104  return balances[msg.sender] */\n      swap1\n      pop\n        /* \"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":4022:4112  function balance() public view returns(uint){\r... */\n      swap1\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":834:1010  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_34:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":892:899  uint256 */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":911:920  uint256 c */\n      dup1\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":927:928  b */\n      dup3\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":923:924  a */\n      dup5\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":923:928  a + b */\n      add\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":911:928  uint256 c = a + b */\n      swap1\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":951:952  a */\n      dup4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":946:947  c */\n      dup2\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":946:952  c >= a */\n      lt\n      iszero\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":938:984  require(c >= a, \"SafeMath: addition overflow\") */\n      tag_49\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x1b\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_49:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":1002:1003  c */\n      dup1\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":995:1003  return c */\n      swap2\n      pop\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":834:1010  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":2159:2618  function mul(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_37:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":2217:2224  uint256 */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":2463:2464  0 */\n      dup1\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":2458:2459  a */\n      dup4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":2458:2464  a == 0 */\n      eq\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":2454:2499  if (a == 0) {... */\n      iszero\n      tag_51\n      jumpi\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":2487:2488  0 */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":2480:2488  return 0 */\n      swap1\n      pop\n      jump(tag_50)\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":2454:2499  if (a == 0) {... */\n    tag_51:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":2509:2518  uint256 c */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":2525:2526  b */\n      dup3\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":2521:2522  a */\n      dup5\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":2521:2526  a * b */\n      mul\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":2509:2526  uint256 c = a * b */\n      swap1\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":2553:2554  b */\n      dup3\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":2548:2549  a */\n      dup5\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":2544:2545  c */\n      dup3\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":2544:2549  c / a */\n      dup2\n      tag_52\n      jumpi\n      invalid\n    tag_52:\n      div\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":2544:2554  c / a == b */\n      eq\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":2536:2592  require(c / a == b, \"SafeMath: multiplication overflow\") */\n      tag_53\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x21\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3\n      0x21\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_53:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":2610:2611  c */\n      dup1\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":2603:2611  return c */\n      swap2\n      pop\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":2159:2618  function mul(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_50:\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":1274:1408  function sub(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_45:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":1332:1339  uint256 */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":1358:1401  sub(a, b, \"SafeMath: subtraction overflow\") */\n      tag_55\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":1362:1363  a */\n      dup4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":1365:1366  b */\n      dup4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":1358:1401  sub(a, b, \"SafeMath: subtraction overflow\") */\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x1e\n      dup2\n      mstore\n      0x20\n      add\n      0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000\n      dup2\n      mstore\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":1358:1361  sub */\n      tag_56\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":1358:1401  sub(a, b, \"SafeMath: subtraction overflow\") */\n      jump\t// in\n    tag_55:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":1351:1401  return sub(a, b, \"SafeMath: subtraction overflow\") */\n      swap1\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":1274:1408  function sub(uint256 a, uint256 b) internal pure returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":1732:1919  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {... */\n    tag_56:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":1818:1825  uint256 */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":1850:1851  a */\n      dup4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":1845:1846  b */\n      dup4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":1845:1851  b <= a */\n      gt\n      iszero\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":1853:1865  errorMessage */\n      dup3\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":1837:1866  require(b <= a, errorMessage) */\n      swap1\n      tag_58\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      dup4\n      dup2\n      dup2\n      mload\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      dup1\n      dup4\n      dup4\n        /* \"--CODEGEN--\":23:24   */\n      0x00\n        /* \"--CODEGEN--\":8:108   */\n    tag_59:\n        /* \"--CODEGEN--\":33:36   */\n      dup4\n        /* \"--CODEGEN--\":30:31   */\n      dup2\n        /* \"--CODEGEN--\":27:37   */\n      lt\n        /* \"--CODEGEN--\":8:108   */\n      iszero\n      tag_61\n      jumpi\n        /* \"--CODEGEN--\":99:100   */\n      dup1\n        /* \"--CODEGEN--\":94:97   */\n      dup3\n        /* \"--CODEGEN--\":90:101   */\n      add\n        /* \"--CODEGEN--\":84:102   */\n      mload\n        /* \"--CODEGEN--\":80:81   */\n      dup2\n        /* \"--CODEGEN--\":75:78   */\n      dup5\n        /* \"--CODEGEN--\":71:82   */\n      add\n        /* \"--CODEGEN--\":64:103   */\n      mstore\n        /* \"--CODEGEN--\":52:54   */\n      0x20\n        /* \"--CODEGEN--\":49:50   */\n      dup2\n        /* \"--CODEGEN--\":45:55   */\n      add\n        /* \"--CODEGEN--\":40:55   */\n      swap1\n      pop\n        /* \"--CODEGEN--\":8:108   */\n      jump(tag_59)\n    tag_61:\n        /* \"--CODEGEN--\":12:26   */\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":1837:1866  require(b <= a, errorMessage) */\n      pop\n      pop\n      pop\n      swap1\n      pop\n      swap1\n      dup2\n      add\n      swap1\n      0x1f\n      and\n      dup1\n      iszero\n      tag_62\n      jumpi\n      dup1\n      dup3\n      sub\n      dup1\n      mload\n      0x01\n      dup4\n      0x20\n      sub\n      0x0100\n      exp\n      sub\n      not\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n    tag_62:\n      pop\n      swap3\n      pop\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_58:\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":1876:1885  uint256 c */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":1892:1893  b */\n      dup4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":1888:1889  a */\n      dup6\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":1888:1893  a - b */\n      sub\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":1876:1893  uint256 c = a - b */\n      swap1\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":1911:1912  c */\n      dup1\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":1904:1912  return c */\n      swap2\n      pop\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":1732:1919  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n    stop\n    data_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3 536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77\n\n    auxdata: 0xa265627a7a72315820dde8b5b50da9f14c6e68a818211c9a0bcbb6a0146e91c4333e293ebb11613a0c64736f6c63430005110032\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040518060400160405280600381526020017f58505400000000000000000000000000000000000000000000000000000000008152506001908051906020019061008f9291906100a7565b5060646002553480156100a157600080fd5b5061014c565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100e857805160ff1916838001178555610116565b82800160010185558215610116579182015b828111156101155782518255916020019190600101906100fa565b5b5090506101239190610127565b5090565b61014991905b8082111561014557600081600090555060010161012d565b5090565b90565b6108fb8061015b6000396000f3fe6080604052600436106100555760003560e01c8063171ef0b21461005a57806340c10f191461008557806364edfbf0146100e057806395d89b41146100ea578063a9059cbb1461017a578063b69ef8a8146101d5575b600080fd5b34801561006657600080fd5b5061006f610200565b6040518082815260200191505060405180910390f35b34801561009157600080fd5b506100de600480360360408110156100a857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610206565b005b6100e8610361565b005b3480156100f657600080fd5b506100ff61047a565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561013f578082015181840152602081019050610124565b50505050905090810190601f16801561016c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561018657600080fd5b506101d36004803603604081101561019d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610518565b005b3480156101e157600080fd5b506101ea610646565b6040518082815260200191505060405180910390f35b60025481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f596f7520617265206e6f7420746865206f776e6572212121000000000000000081525060200191505060405180910390fd5b61031a81600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461068d90919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b60006103786002543461071590919063ffffffff16565b90506103cc81600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461068d90919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015610476573d6000803e3d6000fd5b5050565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105105780601f106104e557610100808354040283529160200191610510565b820191906000526020600020905b8154815290600101906020018083116104f357829003601f168201915b505050505081565b61056a81600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461079b90919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506105ff81600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461068d90919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b60008082840190508381101561070b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b6000808314156107285760009050610795565b600082840290508284828161073957fe5b0414610790576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806108a66021913960400191505060405180910390fd5b809150505b92915050565b60006107dd83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506107e5565b905092915050565b6000838311158290610892576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561085757808201518184015260208101905061083c565b50505050905090810190601f1680156108845780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838503905080915050939250505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a265627a7a72315820dde8b5b50da9f14c6e68a818211c9a0bcbb6a0146e91c4333e293ebb11613a0c64736f6c63430005110032",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLER PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5850540000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x1 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x8F SWAP3 SWAP2 SWAP1 PUSH2 0xA7 JUMP JUMPDEST POP PUSH1 0x64 PUSH1 0x2 SSTORE CALLVALUE DUP1 ISZERO PUSH2 0xA1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14C JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 0x1F LT PUSH2 0xE8 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x116 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x116 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x115 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0xFA JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0x123 SWAP2 SWAP1 PUSH2 0x127 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x149 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x145 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH2 0x12D JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x8FB DUP1 PUSH2 0x15B PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x55 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x171EF0B2 EQ PUSH2 0x5A JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x85 JUMPI DUP1 PUSH4 0x64EDFBF0 EQ PUSH2 0xE0 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0xEA JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0xB69EF8A8 EQ PUSH2 0x1D5 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6F PUSH2 0x200 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x91 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xDE PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xA8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x206 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xE8 PUSH2 0x361 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xFF PUSH2 0x47A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x13F JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x124 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x16C JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x186 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D3 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x19D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x518 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1EA PUSH2 0x646 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2C8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x18 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x596F7520617265206E6F7420746865206F776E65722121210000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x31A DUP2 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x68D SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x378 PUSH1 0x2 SLOAD CALLVALUE PUSH2 0x715 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x3CC DUP2 PUSH1 0x3 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x68D SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x0 DUP1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC CALLVALUE SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x476 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x510 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x4E5 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x510 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x4F3 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH2 0x56A DUP2 PUSH1 0x3 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x79B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x5FF DUP2 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x68D SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x70B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 EQ ISZERO PUSH2 0x728 JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x795 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 MUL SWAP1 POP DUP3 DUP5 DUP3 DUP2 PUSH2 0x739 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x790 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x8A6 PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7DD DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 DUP2 MSTORE POP PUSH2 0x7E5 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 GT ISZERO DUP3 SWAP1 PUSH2 0x892 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x857 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x83C JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x884 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 DUP4 DUP6 SUB SWAP1 POP DUP1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP INVALID MSTORE8 PUSH2 0x6665 0x4D PUSH2 0x7468 GASPRICE KECCAK256 PUSH14 0x756C7469706C69636174696F6E20 PUSH16 0x766572666C6F77A265627A7A72315820 0xDD 0xE8 0xB5 0xB5 0xD 0xA9 CALL 0x4C PUSH15 0x68A818211C9A0BCBB6A0146E91C433 RETURNDATACOPY 0x29 RETURNDATACOPY 0xBB GT PUSH2 0x3A0C PUSH5 0x736F6C6343 STOP SDIV GT STOP ORIGIN ",
							"sourceMap": "3436:1615:0:-;;;3714:10;3690:34;;;;;;;;;;;;;;;;;;;;3731:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;3794:3;3766:31;;3436:1615;8:9:-1;5:2;;;30:1;27;20:12;5:2;3436:1615:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;"
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "6080604052600436106100555760003560e01c8063171ef0b21461005a57806340c10f191461008557806364edfbf0146100e057806395d89b41146100ea578063a9059cbb1461017a578063b69ef8a8146101d5575b600080fd5b34801561006657600080fd5b5061006f610200565b6040518082815260200191505060405180910390f35b34801561009157600080fd5b506100de600480360360408110156100a857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610206565b005b6100e8610361565b005b3480156100f657600080fd5b506100ff61047a565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561013f578082015181840152602081019050610124565b50505050905090810190601f16801561016c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561018657600080fd5b506101d36004803603604081101561019d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610518565b005b3480156101e157600080fd5b506101ea610646565b6040518082815260200191505060405180910390f35b60025481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f596f7520617265206e6f7420746865206f776e6572212121000000000000000081525060200191505060405180910390fd5b61031a81600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461068d90919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b60006103786002543461071590919063ffffffff16565b90506103cc81600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461068d90919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015610476573d6000803e3d6000fd5b5050565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105105780601f106104e557610100808354040283529160200191610510565b820191906000526020600020905b8154815290600101906020018083116104f357829003601f168201915b505050505081565b61056a81600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461079b90919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506105ff81600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461068d90919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b60008082840190508381101561070b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b6000808314156107285760009050610795565b600082840290508284828161073957fe5b0414610790576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806108a66021913960400191505060405180910390fd5b809150505b92915050565b60006107dd83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506107e5565b905092915050565b6000838311158290610892576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561085757808201518184015260208101905061083c565b50505050905090810190601f1680156108845780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838503905080915050939250505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a265627a7a72315820dde8b5b50da9f14c6e68a818211c9a0bcbb6a0146e91c4333e293ebb11613a0c64736f6c63430005110032",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x55 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x171EF0B2 EQ PUSH2 0x5A JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x85 JUMPI DUP1 PUSH4 0x64EDFBF0 EQ PUSH2 0xE0 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0xEA JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0xB69EF8A8 EQ PUSH2 0x1D5 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6F PUSH2 0x200 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x91 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xDE PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xA8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x206 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xE8 PUSH2 0x361 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xFF PUSH2 0x47A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x13F JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x124 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x16C JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x186 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D3 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x19D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x518 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1EA PUSH2 0x646 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2C8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x18 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x596F7520617265206E6F7420746865206F776E65722121210000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x31A DUP2 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x68D SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x378 PUSH1 0x2 SLOAD CALLVALUE PUSH2 0x715 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x3CC DUP2 PUSH1 0x3 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x68D SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x0 DUP1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC CALLVALUE SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x476 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x510 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x4E5 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x510 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x4F3 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH2 0x56A DUP2 PUSH1 0x3 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x79B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x5FF DUP2 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x68D SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x70B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 EQ ISZERO PUSH2 0x728 JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x795 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 MUL SWAP1 POP DUP3 DUP5 DUP3 DUP2 PUSH2 0x739 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x790 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x8A6 PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7DD DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 DUP2 MSTORE POP PUSH2 0x7E5 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 GT ISZERO DUP3 SWAP1 PUSH2 0x892 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x857 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x83C JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x884 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 DUP4 DUP6 SUB SWAP1 POP DUP1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP INVALID MSTORE8 PUSH2 0x6665 0x4D PUSH2 0x7468 GASPRICE KECCAK256 PUSH14 0x756C7469706C69636174696F6E20 PUSH16 0x766572666C6F77A265627A7A72315820 0xDD 0xE8 0xB5 0xB5 0xD 0xA9 CALL 0x4C PUSH15 0x68A818211C9A0BCBB6A0146E91C433 RETURNDATACOPY 0x29 RETURNDATACOPY 0xBB GT PUSH2 0x3A0C PUSH5 0x736F6C6343 STOP SDIV GT STOP ORIGIN ",
							"sourceMap": "3436:1615:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3766:31;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3766:31:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4848:191;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4848:191:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4848:191:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;4543:200;;;:::i;:::-;;3731:28;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3731:28:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;3731:28:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4223:203;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4223:203:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4223:203:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;4022:90;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4022:90:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;3766:31;;;;:::o;4848:191::-;4933:5;;;;;;;;;;;4919:19;;:10;:19;;;4910:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5001:30;5025:5;5001:8;:19;5010:9;5001:19;;;;;;;;;;;;;;;;:23;;:30;;;;:::i;:::-;4979:8;:19;4988:9;4979:19;;;;;;;;;;;;;;;:52;;;;4848:191;;:::o;4543:200::-;4589:11;4603:28;4617:13;;4603:9;:13;;:28;;;;:::i;:::-;4589:42;;4667:32;4692:6;4667:8;:20;4676:10;4667:20;;;;;;;;;;;;;;;;:24;;:32;;;;:::i;:::-;4644:8;:20;4653:10;4644:20;;;;;;;;;;;;;;;:55;;;;4710:5;;;;;;;;;;;:14;;:25;4725:9;4710:25;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4710:25:0;4543:200;:::o;3731:28::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;4223:203::-;4314:31;4339:5;4314:8;:20;4323:10;4314:20;;;;;;;;;;;;;;;;:24;;:31;;;;:::i;:::-;4291:8;:20;4300:10;4291:20;;;;;;;;;;;;;;;:54;;;;4378:30;4402:5;4378:8;:19;4387:9;4378:19;;;;;;;;;;;;;;;;:23;;:30;;;;:::i;:::-;4356:8;:19;4365:9;4356:19;;;;;;;;;;;;;;;:52;;;;4223:203;;:::o;4022:90::-;4061:4;4084:8;:20;4093:10;4084:20;;;;;;;;;;;;;;;;4077:27;;4022:90;:::o;834:176:1:-;892:7;911:9;927:1;923;:5;911:17;;951:1;946;:6;;938:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1002:1;995:8;;;834:176;;;;:::o;2159:459::-;2217:7;2463:1;2458;:6;2454:45;;;2487:1;2480:8;;;;2454:45;2509:9;2525:1;2521;:5;2509:17;;2553:1;2548;2544;:5;;;;;;:10;2536:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2610:1;2603:8;;;2159:459;;;;;:::o;1274:134::-;1332:7;1358:43;1362:1;1365;1358:43;;;;;;;;;;;;;;;;;:3;:43::i;:::-;1351:50;;1274:134;;;;:::o;1732:187::-;1818:7;1850:1;1845;:6;;1853:12;1837:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;1837:29:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1876:9;1892:1;1888;:5;1876:17;;1911:1;1904:8;;;1732:187;;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "459800",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"balance()": "1190",
								"exchange_rate()": "983",
								"mint(address,uint256)": "infinite",
								"purchase()": "infinite",
								"symbol()": "infinite",
								"transfer(address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 3436,
									"end": 5051,
									"name": "PUSH",
									"value": "80"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "PUSH",
									"value": "40"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "MSTORE"
								},
								{
									"begin": 3714,
									"end": 3724,
									"name": "CALLER"
								},
								{
									"begin": 3690,
									"end": 3724,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 3690,
									"end": 3724,
									"name": "DUP1"
								},
								{
									"begin": 3690,
									"end": 3724,
									"name": "PUSH",
									"value": "100"
								},
								{
									"begin": 3690,
									"end": 3724,
									"name": "EXP"
								},
								{
									"begin": 3690,
									"end": 3724,
									"name": "DUP2"
								},
								{
									"begin": 3690,
									"end": 3724,
									"name": "SLOAD"
								},
								{
									"begin": 3690,
									"end": 3724,
									"name": "DUP2"
								},
								{
									"begin": 3690,
									"end": 3724,
									"name": "PUSH",
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 3690,
									"end": 3724,
									"name": "MUL"
								},
								{
									"begin": 3690,
									"end": 3724,
									"name": "NOT"
								},
								{
									"begin": 3690,
									"end": 3724,
									"name": "AND"
								},
								{
									"begin": 3690,
									"end": 3724,
									"name": "SWAP1"
								},
								{
									"begin": 3690,
									"end": 3724,
									"name": "DUP4"
								},
								{
									"begin": 3690,
									"end": 3724,
									"name": "PUSH",
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 3690,
									"end": 3724,
									"name": "AND"
								},
								{
									"begin": 3690,
									"end": 3724,
									"name": "MUL"
								},
								{
									"begin": 3690,
									"end": 3724,
									"name": "OR"
								},
								{
									"begin": 3690,
									"end": 3724,
									"name": "SWAP1"
								},
								{
									"begin": 3690,
									"end": 3724,
									"name": "SSTORE"
								},
								{
									"begin": 3690,
									"end": 3724,
									"name": "POP"
								},
								{
									"begin": 3731,
									"end": 3759,
									"name": "PUSH",
									"value": "40"
								},
								{
									"begin": 3731,
									"end": 3759,
									"name": "MLOAD"
								},
								{
									"begin": 3731,
									"end": 3759,
									"name": "DUP1"
								},
								{
									"begin": 3731,
									"end": 3759,
									"name": "PUSH",
									"value": "40"
								},
								{
									"begin": 3731,
									"end": 3759,
									"name": "ADD"
								},
								{
									"begin": 3731,
									"end": 3759,
									"name": "PUSH",
									"value": "40"
								},
								{
									"begin": 3731,
									"end": 3759,
									"name": "MSTORE"
								},
								{
									"begin": 3731,
									"end": 3759,
									"name": "DUP1"
								},
								{
									"begin": 3731,
									"end": 3759,
									"name": "PUSH",
									"value": "3"
								},
								{
									"begin": 3731,
									"end": 3759,
									"name": "DUP2"
								},
								{
									"begin": 3731,
									"end": 3759,
									"name": "MSTORE"
								},
								{
									"begin": 3731,
									"end": 3759,
									"name": "PUSH",
									"value": "20"
								},
								{
									"begin": 3731,
									"end": 3759,
									"name": "ADD"
								},
								{
									"begin": 3731,
									"end": 3759,
									"name": "PUSH",
									"value": "5850540000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 3731,
									"end": 3759,
									"name": "DUP2"
								},
								{
									"begin": 3731,
									"end": 3759,
									"name": "MSTORE"
								},
								{
									"begin": 3731,
									"end": 3759,
									"name": "POP"
								},
								{
									"begin": 3731,
									"end": 3759,
									"name": "PUSH",
									"value": "1"
								},
								{
									"begin": 3731,
									"end": 3759,
									"name": "SWAP1"
								},
								{
									"begin": 3731,
									"end": 3759,
									"name": "DUP1"
								},
								{
									"begin": 3731,
									"end": 3759,
									"name": "MLOAD"
								},
								{
									"begin": 3731,
									"end": 3759,
									"name": "SWAP1"
								},
								{
									"begin": 3731,
									"end": 3759,
									"name": "PUSH",
									"value": "20"
								},
								{
									"begin": 3731,
									"end": 3759,
									"name": "ADD"
								},
								{
									"begin": 3731,
									"end": 3759,
									"name": "SWAP1"
								},
								{
									"begin": 3731,
									"end": 3759,
									"name": "PUSH [tag]",
									"value": "1"
								},
								{
									"begin": 3731,
									"end": 3759,
									"name": "SWAP3"
								},
								{
									"begin": 3731,
									"end": 3759,
									"name": "SWAP2"
								},
								{
									"begin": 3731,
									"end": 3759,
									"name": "SWAP1"
								},
								{
									"begin": 3731,
									"end": 3759,
									"name": "PUSH [tag]",
									"value": "2"
								},
								{
									"begin": 3731,
									"end": 3759,
									"name": "JUMP",
									"value": "[in]"
								},
								{
									"begin": 3731,
									"end": 3759,
									"name": "tag",
									"value": "1"
								},
								{
									"begin": 3731,
									"end": 3759,
									"name": "JUMPDEST"
								},
								{
									"begin": 3731,
									"end": 3759,
									"name": "POP"
								},
								{
									"begin": 3794,
									"end": 3797,
									"name": "PUSH",
									"value": "64"
								},
								{
									"begin": 3766,
									"end": 3797,
									"name": "PUSH",
									"value": "2"
								},
								{
									"begin": 3766,
									"end": 3797,
									"name": "SSTORE"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "CALLVALUE"
								},
								{
									"begin": 8,
									"end": 17,
									"name": "DUP1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "ISZERO"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "PUSH [tag]",
									"value": "3"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "JUMPI"
								},
								{
									"begin": 30,
									"end": 31,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 27,
									"end": 28,
									"name": "DUP1"
								},
								{
									"begin": 20,
									"end": 32,
									"name": "REVERT"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "tag",
									"value": "3"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "JUMPDEST"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "POP"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "PUSH [tag]",
									"value": "4"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "JUMP"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "tag",
									"value": "2"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "JUMPDEST"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "DUP3"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "DUP1"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "SLOAD"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "PUSH",
									"value": "1"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "DUP2"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "PUSH",
									"value": "1"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "AND"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "ISZERO"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "PUSH",
									"value": "100"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "MUL"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "SUB"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "AND"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "PUSH",
									"value": "2"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "SWAP1"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "DIV"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "SWAP1"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "MSTORE"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "PUSH",
									"value": "20"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "KECCAK256"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "SWAP1"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "PUSH",
									"value": "1F"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "ADD"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "PUSH",
									"value": "20"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "SWAP1"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "DIV"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "DUP2"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "ADD"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "SWAP3"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "DUP3"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "PUSH",
									"value": "1F"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "LT"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "PUSH [tag]",
									"value": "6"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "JUMPI"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "DUP1"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "MLOAD"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "PUSH",
									"value": "FF"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "NOT"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "AND"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "DUP4"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "DUP1"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "ADD"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "OR"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "DUP6"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "SSTORE"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "PUSH [tag]",
									"value": "5"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "JUMP"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "tag",
									"value": "6"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "JUMPDEST"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "DUP3"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "DUP1"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "ADD"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "PUSH",
									"value": "1"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "ADD"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "DUP6"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "SSTORE"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "DUP3"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "ISZERO"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "PUSH [tag]",
									"value": "5"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "JUMPI"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "SWAP2"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "DUP3"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "ADD"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "tag",
									"value": "7"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "JUMPDEST"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "DUP3"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "DUP2"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "GT"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "ISZERO"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "PUSH [tag]",
									"value": "8"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "JUMPI"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "DUP3"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "MLOAD"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "DUP3"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "SSTORE"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "SWAP2"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "PUSH",
									"value": "20"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "ADD"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "SWAP2"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "SWAP1"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "PUSH",
									"value": "1"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "ADD"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "SWAP1"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "PUSH [tag]",
									"value": "7"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "JUMP"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "tag",
									"value": "8"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "JUMPDEST"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "tag",
									"value": "5"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "JUMPDEST"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "POP"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "SWAP1"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "POP"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "PUSH [tag]",
									"value": "9"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "SWAP2"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "SWAP1"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "PUSH [tag]",
									"value": "10"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "JUMP",
									"value": "[in]"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "tag",
									"value": "9"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "JUMPDEST"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "POP"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "SWAP1"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "JUMP",
									"value": "[out]"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "tag",
									"value": "10"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "JUMPDEST"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "PUSH [tag]",
									"value": "11"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "SWAP2"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "SWAP1"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "tag",
									"value": "12"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "JUMPDEST"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "DUP1"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "DUP3"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "GT"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "ISZERO"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "PUSH [tag]",
									"value": "13"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "JUMPI"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "DUP2"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "SWAP1"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "SSTORE"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "POP"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "PUSH",
									"value": "1"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "ADD"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "PUSH [tag]",
									"value": "12"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "JUMP"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "tag",
									"value": "13"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "JUMPDEST"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "POP"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "SWAP1"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "JUMP"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "tag",
									"value": "11"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "JUMPDEST"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "SWAP1"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "JUMP",
									"value": "[out]"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "tag",
									"value": "4"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "JUMPDEST"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "PUSH #[$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "DUP1"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "PUSH [$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "CODECOPY"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 3436,
									"end": 5051,
									"name": "RETURN"
								}
							],
							".data": {
								"0": {
									".auxdata": "a265627a7a72315820dde8b5b50da9f14c6e68a818211c9a0bcbb6a0146e91c4333e293ebb11613a0c64736f6c63430005110032",
									".code": [
										{
											"begin": 3436,
											"end": 5051,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": 3436,
											"end": 5051,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 3436,
											"end": 5051,
											"name": "MSTORE"
										},
										{
											"begin": 3436,
											"end": 5051,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 3436,
											"end": 5051,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 3436,
											"end": 5051,
											"name": "LT"
										},
										{
											"begin": 3436,
											"end": 5051,
											"name": "PUSH [tag]",
											"value": "1"
										},
										{
											"begin": 3436,
											"end": 5051,
											"name": "JUMPI"
										},
										{
											"begin": 3436,
											"end": 5051,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 3436,
											"end": 5051,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 3436,
											"end": 5051,
											"name": "PUSH",
											"value": "E0"
										},
										{
											"begin": 3436,
											"end": 5051,
											"name": "SHR"
										},
										{
											"begin": 3436,
											"end": 5051,
											"name": "DUP1"
										},
										{
											"begin": 3436,
											"end": 5051,
											"name": "PUSH",
											"value": "171EF0B2"
										},
										{
											"begin": 3436,
											"end": 5051,
											"name": "EQ"
										},
										{
											"begin": 3436,
											"end": 5051,
											"name": "PUSH [tag]",
											"value": "2"
										},
										{
											"begin": 3436,
											"end": 5051,
											"name": "JUMPI"
										},
										{
											"begin": 3436,
											"end": 5051,
											"name": "DUP1"
										},
										{
											"begin": 3436,
											"end": 5051,
											"name": "PUSH",
											"value": "40C10F19"
										},
										{
											"begin": 3436,
											"end": 5051,
											"name": "EQ"
										},
										{
											"begin": 3436,
											"end": 5051,
											"name": "PUSH [tag]",
											"value": "3"
										},
										{
											"begin": 3436,
											"end": 5051,
											"name": "JUMPI"
										},
										{
											"begin": 3436,
											"end": 5051,
											"name": "DUP1"
										},
										{
											"begin": 3436,
											"end": 5051,
											"name": "PUSH",
											"value": "64EDFBF0"
										},
										{
											"begin": 3436,
											"end": 5051,
											"name": "EQ"
										},
										{
											"begin": 3436,
											"end": 5051,
											"name": "PUSH [tag]",
											"value": "4"
										},
										{
											"begin": 3436,
											"end": 5051,
											"name": "JUMPI"
										},
										{
											"begin": 3436,
											"end": 5051,
											"name": "DUP1"
										},
										{
											"begin": 3436,
											"end": 5051,
											"name": "PUSH",
											"value": "95D89B41"
										},
										{
											"begin": 3436,
											"end": 5051,
											"name": "EQ"
										},
										{
											"begin": 3436,
											"end": 5051,
											"name": "PUSH [tag]",
											"value": "5"
										},
										{
											"begin": 3436,
											"end": 5051,
											"name": "JUMPI"
										},
										{
											"begin": 3436,
											"end": 5051,
											"name": "DUP1"
										},
										{
											"begin": 3436,
											"end": 5051,
											"name": "PUSH",
											"value": "A9059CBB"
										},
										{
											"begin": 3436,
											"end": 5051,
											"name": "EQ"
										},
										{
											"begin": 3436,
											"end": 5051,
											"name": "PUSH [tag]",
											"value": "6"
										},
										{
											"begin": 3436,
											"end": 5051,
											"name": "JUMPI"
										},
										{
											"begin": 3436,
											"end": 5051,
											"name": "DUP1"
										},
										{
											"begin": 3436,
											"end": 5051,
											"name": "PUSH",
											"value": "B69EF8A8"
										},
										{
											"begin": 3436,
											"end": 5051,
											"name": "EQ"
										},
										{
											"begin": 3436,
											"end": 5051,
											"name": "PUSH [tag]",
											"value": "7"
										},
										{
											"begin": 3436,
											"end": 5051,
											"name": "JUMPI"
										},
										{
											"begin": 3436,
											"end": 5051,
											"name": "tag",
											"value": "1"
										},
										{
											"begin": 3436,
											"end": 5051,
											"name": "JUMPDEST"
										},
										{
											"begin": 3436,
											"end": 5051,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 3436,
											"end": 5051,
											"name": "DUP1"
										},
										{
											"begin": 3436,
											"end": 5051,
											"name": "REVERT"
										},
										{
											"begin": 3766,
											"end": 3797,
											"name": "tag",
											"value": "2"
										},
										{
											"begin": 3766,
											"end": 3797,
											"name": "JUMPDEST"
										},
										{
											"begin": 3766,
											"end": 3797,
											"name": "CALLVALUE"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "8"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "8"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 3766,
											"end": 3797,
											"name": "POP"
										},
										{
											"begin": 3766,
											"end": 3797,
											"name": "PUSH [tag]",
											"value": "9"
										},
										{
											"begin": 3766,
											"end": 3797,
											"name": "PUSH [tag]",
											"value": "10"
										},
										{
											"begin": 3766,
											"end": 3797,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 3766,
											"end": 3797,
											"name": "tag",
											"value": "9"
										},
										{
											"begin": 3766,
											"end": 3797,
											"name": "JUMPDEST"
										},
										{
											"begin": 3766,
											"end": 3797,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 3766,
											"end": 3797,
											"name": "MLOAD"
										},
										{
											"begin": 3766,
											"end": 3797,
											"name": "DUP1"
										},
										{
											"begin": 3766,
											"end": 3797,
											"name": "DUP3"
										},
										{
											"begin": 3766,
											"end": 3797,
											"name": "DUP2"
										},
										{
											"begin": 3766,
											"end": 3797,
											"name": "MSTORE"
										},
										{
											"begin": 3766,
											"end": 3797,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3766,
											"end": 3797,
											"name": "ADD"
										},
										{
											"begin": 3766,
											"end": 3797,
											"name": "SWAP2"
										},
										{
											"begin": 3766,
											"end": 3797,
											"name": "POP"
										},
										{
											"begin": 3766,
											"end": 3797,
											"name": "POP"
										},
										{
											"begin": 3766,
											"end": 3797,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 3766,
											"end": 3797,
											"name": "MLOAD"
										},
										{
											"begin": 3766,
											"end": 3797,
											"name": "DUP1"
										},
										{
											"begin": 3766,
											"end": 3797,
											"name": "SWAP2"
										},
										{
											"begin": 3766,
											"end": 3797,
											"name": "SUB"
										},
										{
											"begin": 3766,
											"end": 3797,
											"name": "SWAP1"
										},
										{
											"begin": 3766,
											"end": 3797,
											"name": "RETURN"
										},
										{
											"begin": 4848,
											"end": 5039,
											"name": "tag",
											"value": "3"
										},
										{
											"begin": 4848,
											"end": 5039,
											"name": "JUMPDEST"
										},
										{
											"begin": 4848,
											"end": 5039,
											"name": "CALLVALUE"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "11"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "11"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 4848,
											"end": 5039,
											"name": "POP"
										},
										{
											"begin": 4848,
											"end": 5039,
											"name": "PUSH [tag]",
											"value": "12"
										},
										{
											"begin": 4848,
											"end": 5039,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 4848,
											"end": 5039,
											"name": "DUP1"
										},
										{
											"begin": 4848,
											"end": 5039,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 4848,
											"end": 5039,
											"name": "SUB"
										},
										{
											"begin": 13,
											"end": 15,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 8,
											"end": 11,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 16,
											"name": "LT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "13"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 29,
											"end": 30,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 26,
											"end": 27,
											"name": "DUP1"
										},
										{
											"begin": 19,
											"end": 31,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "13"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 4848,
											"end": 5039,
											"name": "DUP2"
										},
										{
											"begin": 4848,
											"end": 5039,
											"name": "ADD"
										},
										{
											"begin": 4848,
											"end": 5039,
											"name": "SWAP1"
										},
										{
											"begin": 4848,
											"end": 5039,
											"name": "DUP1"
										},
										{
											"begin": 4848,
											"end": 5039,
											"name": "DUP1"
										},
										{
											"begin": 4848,
											"end": 5039,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 4848,
											"end": 5039,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4848,
											"end": 5039,
											"name": "AND"
										},
										{
											"begin": 4848,
											"end": 5039,
											"name": "SWAP1"
										},
										{
											"begin": 4848,
											"end": 5039,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4848,
											"end": 5039,
											"name": "ADD"
										},
										{
											"begin": 4848,
											"end": 5039,
											"name": "SWAP1"
										},
										{
											"begin": 4848,
											"end": 5039,
											"name": "SWAP3"
										},
										{
											"begin": 4848,
											"end": 5039,
											"name": "SWAP2"
										},
										{
											"begin": 4848,
											"end": 5039,
											"name": "SWAP1"
										},
										{
											"begin": 4848,
											"end": 5039,
											"name": "DUP1"
										},
										{
											"begin": 4848,
											"end": 5039,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 4848,
											"end": 5039,
											"name": "SWAP1"
										},
										{
											"begin": 4848,
											"end": 5039,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4848,
											"end": 5039,
											"name": "ADD"
										},
										{
											"begin": 4848,
											"end": 5039,
											"name": "SWAP1"
										},
										{
											"begin": 4848,
											"end": 5039,
											"name": "SWAP3"
										},
										{
											"begin": 4848,
											"end": 5039,
											"name": "SWAP2"
										},
										{
											"begin": 4848,
											"end": 5039,
											"name": "SWAP1"
										},
										{
											"begin": 4848,
											"end": 5039,
											"name": "POP"
										},
										{
											"begin": 4848,
											"end": 5039,
											"name": "POP"
										},
										{
											"begin": 4848,
											"end": 5039,
											"name": "POP"
										},
										{
											"begin": 4848,
											"end": 5039,
											"name": "PUSH [tag]",
											"value": "14"
										},
										{
											"begin": 4848,
											"end": 5039,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 4848,
											"end": 5039,
											"name": "tag",
											"value": "12"
										},
										{
											"begin": 4848,
											"end": 5039,
											"name": "JUMPDEST"
										},
										{
											"begin": 4848,
											"end": 5039,
											"name": "STOP"
										},
										{
											"begin": 4543,
											"end": 4743,
											"name": "tag",
											"value": "4"
										},
										{
											"begin": 4543,
											"end": 4743,
											"name": "JUMPDEST"
										},
										{
											"begin": 4543,
											"end": 4743,
											"name": "PUSH [tag]",
											"value": "15"
										},
										{
											"begin": 4543,
											"end": 4743,
											"name": "PUSH [tag]",
											"value": "16"
										},
										{
											"begin": 4543,
											"end": 4743,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 4543,
											"end": 4743,
											"name": "tag",
											"value": "15"
										},
										{
											"begin": 4543,
											"end": 4743,
											"name": "JUMPDEST"
										},
										{
											"begin": 4543,
											"end": 4743,
											"name": "STOP"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "tag",
											"value": "5"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "JUMPDEST"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "CALLVALUE"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "17"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "17"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "POP"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "PUSH [tag]",
											"value": "18"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "PUSH [tag]",
											"value": "19"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "tag",
											"value": "18"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "JUMPDEST"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "MLOAD"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "DUP1"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "DUP1"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "ADD"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "DUP3"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "DUP2"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "SUB"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "DUP3"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "MSTORE"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "DUP4"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "DUP2"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "DUP2"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "MLOAD"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "DUP2"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "MSTORE"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "ADD"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "SWAP2"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "POP"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "DUP1"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "MLOAD"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "SWAP1"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "ADD"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "SWAP1"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "DUP1"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "DUP4"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "DUP4"
										},
										{
											"begin": 23,
											"end": 24,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "tag",
											"value": "20"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "JUMPDEST"
										},
										{
											"begin": 33,
											"end": 36,
											"name": "DUP4"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "DUP2"
										},
										{
											"begin": 27,
											"end": 37,
											"name": "LT"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "ISZERO"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "PUSH [tag]",
											"value": "22"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "JUMPI"
										},
										{
											"begin": 99,
											"end": 100,
											"name": "DUP1"
										},
										{
											"begin": 94,
											"end": 97,
											"name": "DUP3"
										},
										{
											"begin": 90,
											"end": 101,
											"name": "ADD"
										},
										{
											"begin": 84,
											"end": 102,
											"name": "MLOAD"
										},
										{
											"begin": 80,
											"end": 81,
											"name": "DUP2"
										},
										{
											"begin": 75,
											"end": 78,
											"name": "DUP5"
										},
										{
											"begin": 71,
											"end": 82,
											"name": "ADD"
										},
										{
											"begin": 64,
											"end": 103,
											"name": "MSTORE"
										},
										{
											"begin": 52,
											"end": 54,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 49,
											"end": 50,
											"name": "DUP2"
										},
										{
											"begin": 45,
											"end": 55,
											"name": "ADD"
										},
										{
											"begin": 40,
											"end": 55,
											"name": "SWAP1"
										},
										{
											"begin": 40,
											"end": 55,
											"name": "POP"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "PUSH [tag]",
											"value": "20"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "JUMP"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "tag",
											"value": "22"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "JUMPDEST"
										},
										{
											"begin": 12,
											"end": 26,
											"name": "POP"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "POP"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "POP"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "POP"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "SWAP1"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "POP"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "SWAP1"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "DUP2"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "ADD"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "SWAP1"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "PUSH",
											"value": "1F"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "AND"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "DUP1"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "ISZERO"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "PUSH [tag]",
											"value": "23"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "JUMPI"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "DUP1"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "DUP3"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "SUB"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "DUP1"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "MLOAD"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "DUP4"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "SUB"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "EXP"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "SUB"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "NOT"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "AND"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "DUP2"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "MSTORE"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "ADD"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "SWAP2"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "POP"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "tag",
											"value": "23"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "JUMPDEST"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "POP"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "SWAP3"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "POP"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "POP"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "POP"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "MLOAD"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "DUP1"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "SWAP2"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "SUB"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "SWAP1"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "RETURN"
										},
										{
											"begin": 4223,
											"end": 4426,
											"name": "tag",
											"value": "6"
										},
										{
											"begin": 4223,
											"end": 4426,
											"name": "JUMPDEST"
										},
										{
											"begin": 4223,
											"end": 4426,
											"name": "CALLVALUE"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "24"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "24"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 4223,
											"end": 4426,
											"name": "POP"
										},
										{
											"begin": 4223,
											"end": 4426,
											"name": "PUSH [tag]",
											"value": "25"
										},
										{
											"begin": 4223,
											"end": 4426,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 4223,
											"end": 4426,
											"name": "DUP1"
										},
										{
											"begin": 4223,
											"end": 4426,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 4223,
											"end": 4426,
											"name": "SUB"
										},
										{
											"begin": 13,
											"end": 15,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 8,
											"end": 11,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 16,
											"name": "LT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "26"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 29,
											"end": 30,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 26,
											"end": 27,
											"name": "DUP1"
										},
										{
											"begin": 19,
											"end": 31,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "26"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 4223,
											"end": 4426,
											"name": "DUP2"
										},
										{
											"begin": 4223,
											"end": 4426,
											"name": "ADD"
										},
										{
											"begin": 4223,
											"end": 4426,
											"name": "SWAP1"
										},
										{
											"begin": 4223,
											"end": 4426,
											"name": "DUP1"
										},
										{
											"begin": 4223,
											"end": 4426,
											"name": "DUP1"
										},
										{
											"begin": 4223,
											"end": 4426,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 4223,
											"end": 4426,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4223,
											"end": 4426,
											"name": "AND"
										},
										{
											"begin": 4223,
											"end": 4426,
											"name": "SWAP1"
										},
										{
											"begin": 4223,
											"end": 4426,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4223,
											"end": 4426,
											"name": "ADD"
										},
										{
											"begin": 4223,
											"end": 4426,
											"name": "SWAP1"
										},
										{
											"begin": 4223,
											"end": 4426,
											"name": "SWAP3"
										},
										{
											"begin": 4223,
											"end": 4426,
											"name": "SWAP2"
										},
										{
											"begin": 4223,
											"end": 4426,
											"name": "SWAP1"
										},
										{
											"begin": 4223,
											"end": 4426,
											"name": "DUP1"
										},
										{
											"begin": 4223,
											"end": 4426,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 4223,
											"end": 4426,
											"name": "SWAP1"
										},
										{
											"begin": 4223,
											"end": 4426,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4223,
											"end": 4426,
											"name": "ADD"
										},
										{
											"begin": 4223,
											"end": 4426,
											"name": "SWAP1"
										},
										{
											"begin": 4223,
											"end": 4426,
											"name": "SWAP3"
										},
										{
											"begin": 4223,
											"end": 4426,
											"name": "SWAP2"
										},
										{
											"begin": 4223,
											"end": 4426,
											"name": "SWAP1"
										},
										{
											"begin": 4223,
											"end": 4426,
											"name": "POP"
										},
										{
											"begin": 4223,
											"end": 4426,
											"name": "POP"
										},
										{
											"begin": 4223,
											"end": 4426,
											"name": "POP"
										},
										{
											"begin": 4223,
											"end": 4426,
											"name": "PUSH [tag]",
											"value": "27"
										},
										{
											"begin": 4223,
											"end": 4426,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 4223,
											"end": 4426,
											"name": "tag",
											"value": "25"
										},
										{
											"begin": 4223,
											"end": 4426,
											"name": "JUMPDEST"
										},
										{
											"begin": 4223,
											"end": 4426,
											"name": "STOP"
										},
										{
											"begin": 4022,
											"end": 4112,
											"name": "tag",
											"value": "7"
										},
										{
											"begin": 4022,
											"end": 4112,
											"name": "JUMPDEST"
										},
										{
											"begin": 4022,
											"end": 4112,
											"name": "CALLVALUE"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "28"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "28"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 4022,
											"end": 4112,
											"name": "POP"
										},
										{
											"begin": 4022,
											"end": 4112,
											"name": "PUSH [tag]",
											"value": "29"
										},
										{
											"begin": 4022,
											"end": 4112,
											"name": "PUSH [tag]",
											"value": "30"
										},
										{
											"begin": 4022,
											"end": 4112,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 4022,
											"end": 4112,
											"name": "tag",
											"value": "29"
										},
										{
											"begin": 4022,
											"end": 4112,
											"name": "JUMPDEST"
										},
										{
											"begin": 4022,
											"end": 4112,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 4022,
											"end": 4112,
											"name": "MLOAD"
										},
										{
											"begin": 4022,
											"end": 4112,
											"name": "DUP1"
										},
										{
											"begin": 4022,
											"end": 4112,
											"name": "DUP3"
										},
										{
											"begin": 4022,
											"end": 4112,
											"name": "DUP2"
										},
										{
											"begin": 4022,
											"end": 4112,
											"name": "MSTORE"
										},
										{
											"begin": 4022,
											"end": 4112,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4022,
											"end": 4112,
											"name": "ADD"
										},
										{
											"begin": 4022,
											"end": 4112,
											"name": "SWAP2"
										},
										{
											"begin": 4022,
											"end": 4112,
											"name": "POP"
										},
										{
											"begin": 4022,
											"end": 4112,
											"name": "POP"
										},
										{
											"begin": 4022,
											"end": 4112,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 4022,
											"end": 4112,
											"name": "MLOAD"
										},
										{
											"begin": 4022,
											"end": 4112,
											"name": "DUP1"
										},
										{
											"begin": 4022,
											"end": 4112,
											"name": "SWAP2"
										},
										{
											"begin": 4022,
											"end": 4112,
											"name": "SUB"
										},
										{
											"begin": 4022,
											"end": 4112,
											"name": "SWAP1"
										},
										{
											"begin": 4022,
											"end": 4112,
											"name": "RETURN"
										},
										{
											"begin": 3766,
											"end": 3797,
											"name": "tag",
											"value": "10"
										},
										{
											"begin": 3766,
											"end": 3797,
											"name": "JUMPDEST"
										},
										{
											"begin": 3766,
											"end": 3797,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": 3766,
											"end": 3797,
											"name": "SLOAD"
										},
										{
											"begin": 3766,
											"end": 3797,
											"name": "DUP2"
										},
										{
											"begin": 3766,
											"end": 3797,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 4848,
											"end": 5039,
											"name": "tag",
											"value": "14"
										},
										{
											"begin": 4848,
											"end": 5039,
											"name": "JUMPDEST"
										},
										{
											"begin": 4933,
											"end": 4938,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 4933,
											"end": 4938,
											"name": "DUP1"
										},
										{
											"begin": 4933,
											"end": 4938,
											"name": "SWAP1"
										},
										{
											"begin": 4933,
											"end": 4938,
											"name": "SLOAD"
										},
										{
											"begin": 4933,
											"end": 4938,
											"name": "SWAP1"
										},
										{
											"begin": 4933,
											"end": 4938,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 4933,
											"end": 4938,
											"name": "EXP"
										},
										{
											"begin": 4933,
											"end": 4938,
											"name": "SWAP1"
										},
										{
											"begin": 4933,
											"end": 4938,
											"name": "DIV"
										},
										{
											"begin": 4933,
											"end": 4938,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4933,
											"end": 4938,
											"name": "AND"
										},
										{
											"begin": 4919,
											"end": 4938,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4919,
											"end": 4938,
											"name": "AND"
										},
										{
											"begin": 4919,
											"end": 4929,
											"name": "CALLER"
										},
										{
											"begin": 4919,
											"end": 4938,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4919,
											"end": 4938,
											"name": "AND"
										},
										{
											"begin": 4919,
											"end": 4938,
											"name": "EQ"
										},
										{
											"begin": 4910,
											"end": 4966,
											"name": "PUSH [tag]",
											"value": "32"
										},
										{
											"begin": 4910,
											"end": 4966,
											"name": "JUMPI"
										},
										{
											"begin": 4910,
											"end": 4966,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 4910,
											"end": 4966,
											"name": "MLOAD"
										},
										{
											"begin": 4910,
											"end": 4966,
											"name": "PUSH",
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4910,
											"end": 4966,
											"name": "DUP2"
										},
										{
											"begin": 4910,
											"end": 4966,
											"name": "MSTORE"
										},
										{
											"begin": 4910,
											"end": 4966,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 4910,
											"end": 4966,
											"name": "ADD"
										},
										{
											"begin": 4910,
											"end": 4966,
											"name": "DUP1"
										},
										{
											"begin": 4910,
											"end": 4966,
											"name": "DUP1"
										},
										{
											"begin": 4910,
											"end": 4966,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4910,
											"end": 4966,
											"name": "ADD"
										},
										{
											"begin": 4910,
											"end": 4966,
											"name": "DUP3"
										},
										{
											"begin": 4910,
											"end": 4966,
											"name": "DUP2"
										},
										{
											"begin": 4910,
											"end": 4966,
											"name": "SUB"
										},
										{
											"begin": 4910,
											"end": 4966,
											"name": "DUP3"
										},
										{
											"begin": 4910,
											"end": 4966,
											"name": "MSTORE"
										},
										{
											"begin": 4910,
											"end": 4966,
											"name": "PUSH",
											"value": "18"
										},
										{
											"begin": 4910,
											"end": 4966,
											"name": "DUP2"
										},
										{
											"begin": 4910,
											"end": 4966,
											"name": "MSTORE"
										},
										{
											"begin": 4910,
											"end": 4966,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4910,
											"end": 4966,
											"name": "ADD"
										},
										{
											"begin": 4910,
											"end": 4966,
											"name": "DUP1"
										},
										{
											"begin": 4910,
											"end": 4966,
											"name": "PUSH",
											"value": "596F7520617265206E6F7420746865206F776E65722121210000000000000000"
										},
										{
											"begin": 4910,
											"end": 4966,
											"name": "DUP2"
										},
										{
											"begin": 4910,
											"end": 4966,
											"name": "MSTORE"
										},
										{
											"begin": 4910,
											"end": 4966,
											"name": "POP"
										},
										{
											"begin": 4910,
											"end": 4966,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4910,
											"end": 4966,
											"name": "ADD"
										},
										{
											"begin": 4910,
											"end": 4966,
											"name": "SWAP2"
										},
										{
											"begin": 4910,
											"end": 4966,
											"name": "POP"
										},
										{
											"begin": 4910,
											"end": 4966,
											"name": "POP"
										},
										{
											"begin": 4910,
											"end": 4966,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 4910,
											"end": 4966,
											"name": "MLOAD"
										},
										{
											"begin": 4910,
											"end": 4966,
											"name": "DUP1"
										},
										{
											"begin": 4910,
											"end": 4966,
											"name": "SWAP2"
										},
										{
											"begin": 4910,
											"end": 4966,
											"name": "SUB"
										},
										{
											"begin": 4910,
											"end": 4966,
											"name": "SWAP1"
										},
										{
											"begin": 4910,
											"end": 4966,
											"name": "REVERT"
										},
										{
											"begin": 4910,
											"end": 4966,
											"name": "tag",
											"value": "32"
										},
										{
											"begin": 4910,
											"end": 4966,
											"name": "JUMPDEST"
										},
										{
											"begin": 5001,
											"end": 5031,
											"name": "PUSH [tag]",
											"value": "33"
										},
										{
											"begin": 5025,
											"end": 5030,
											"name": "DUP2"
										},
										{
											"begin": 5001,
											"end": 5009,
											"name": "PUSH",
											"value": "3"
										},
										{
											"begin": 5001,
											"end": 5020,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 5010,
											"end": 5019,
											"name": "DUP6"
										},
										{
											"begin": 5001,
											"end": 5020,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5001,
											"end": 5020,
											"name": "AND"
										},
										{
											"begin": 5001,
											"end": 5020,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5001,
											"end": 5020,
											"name": "AND"
										},
										{
											"begin": 5001,
											"end": 5020,
											"name": "DUP2"
										},
										{
											"begin": 5001,
											"end": 5020,
											"name": "MSTORE"
										},
										{
											"begin": 5001,
											"end": 5020,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 5001,
											"end": 5020,
											"name": "ADD"
										},
										{
											"begin": 5001,
											"end": 5020,
											"name": "SWAP1"
										},
										{
											"begin": 5001,
											"end": 5020,
											"name": "DUP2"
										},
										{
											"begin": 5001,
											"end": 5020,
											"name": "MSTORE"
										},
										{
											"begin": 5001,
											"end": 5020,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 5001,
											"end": 5020,
											"name": "ADD"
										},
										{
											"begin": 5001,
											"end": 5020,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 5001,
											"end": 5020,
											"name": "KECCAK256"
										},
										{
											"begin": 5001,
											"end": 5020,
											"name": "SLOAD"
										},
										{
											"begin": 5001,
											"end": 5024,
											"name": "PUSH [tag]",
											"value": "34"
										},
										{
											"begin": 5001,
											"end": 5024,
											"name": "SWAP1"
										},
										{
											"begin": 5001,
											"end": 5031,
											"name": "SWAP2"
										},
										{
											"begin": 5001,
											"end": 5031,
											"name": "SWAP1"
										},
										{
											"begin": 5001,
											"end": 5031,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 5001,
											"end": 5031,
											"name": "AND"
										},
										{
											"begin": 5001,
											"end": 5031,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 5001,
											"end": 5031,
											"name": "tag",
											"value": "33"
										},
										{
											"begin": 5001,
											"end": 5031,
											"name": "JUMPDEST"
										},
										{
											"begin": 4979,
											"end": 4987,
											"name": "PUSH",
											"value": "3"
										},
										{
											"begin": 4979,
											"end": 4998,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 4988,
											"end": 4997,
											"name": "DUP5"
										},
										{
											"begin": 4979,
											"end": 4998,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4979,
											"end": 4998,
											"name": "AND"
										},
										{
											"begin": 4979,
											"end": 4998,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4979,
											"end": 4998,
											"name": "AND"
										},
										{
											"begin": 4979,
											"end": 4998,
											"name": "DUP2"
										},
										{
											"begin": 4979,
											"end": 4998,
											"name": "MSTORE"
										},
										{
											"begin": 4979,
											"end": 4998,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4979,
											"end": 4998,
											"name": "ADD"
										},
										{
											"begin": 4979,
											"end": 4998,
											"name": "SWAP1"
										},
										{
											"begin": 4979,
											"end": 4998,
											"name": "DUP2"
										},
										{
											"begin": 4979,
											"end": 4998,
											"name": "MSTORE"
										},
										{
											"begin": 4979,
											"end": 4998,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4979,
											"end": 4998,
											"name": "ADD"
										},
										{
											"begin": 4979,
											"end": 4998,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 4979,
											"end": 4998,
											"name": "KECCAK256"
										},
										{
											"begin": 4979,
											"end": 5031,
											"name": "DUP2"
										},
										{
											"begin": 4979,
											"end": 5031,
											"name": "SWAP1"
										},
										{
											"begin": 4979,
											"end": 5031,
											"name": "SSTORE"
										},
										{
											"begin": 4979,
											"end": 5031,
											"name": "POP"
										},
										{
											"begin": 4848,
											"end": 5039,
											"name": "POP"
										},
										{
											"begin": 4848,
											"end": 5039,
											"name": "POP"
										},
										{
											"begin": 4848,
											"end": 5039,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 4543,
											"end": 4743,
											"name": "tag",
											"value": "16"
										},
										{
											"begin": 4543,
											"end": 4743,
											"name": "JUMPDEST"
										},
										{
											"begin": 4589,
											"end": 4600,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 4603,
											"end": 4631,
											"name": "PUSH [tag]",
											"value": "36"
										},
										{
											"begin": 4617,
											"end": 4630,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": 4617,
											"end": 4630,
											"name": "SLOAD"
										},
										{
											"begin": 4603,
											"end": 4612,
											"name": "CALLVALUE"
										},
										{
											"begin": 4603,
											"end": 4616,
											"name": "PUSH [tag]",
											"value": "37"
										},
										{
											"begin": 4603,
											"end": 4616,
											"name": "SWAP1"
										},
										{
											"begin": 4603,
											"end": 4631,
											"name": "SWAP2"
										},
										{
											"begin": 4603,
											"end": 4631,
											"name": "SWAP1"
										},
										{
											"begin": 4603,
											"end": 4631,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 4603,
											"end": 4631,
											"name": "AND"
										},
										{
											"begin": 4603,
											"end": 4631,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 4603,
											"end": 4631,
											"name": "tag",
											"value": "36"
										},
										{
											"begin": 4603,
											"end": 4631,
											"name": "JUMPDEST"
										},
										{
											"begin": 4589,
											"end": 4631,
											"name": "SWAP1"
										},
										{
											"begin": 4589,
											"end": 4631,
											"name": "POP"
										},
										{
											"begin": 4667,
											"end": 4699,
											"name": "PUSH [tag]",
											"value": "38"
										},
										{
											"begin": 4692,
											"end": 4698,
											"name": "DUP2"
										},
										{
											"begin": 4667,
											"end": 4675,
											"name": "PUSH",
											"value": "3"
										},
										{
											"begin": 4667,
											"end": 4687,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 4676,
											"end": 4686,
											"name": "CALLER"
										},
										{
											"begin": 4667,
											"end": 4687,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4667,
											"end": 4687,
											"name": "AND"
										},
										{
											"begin": 4667,
											"end": 4687,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4667,
											"end": 4687,
											"name": "AND"
										},
										{
											"begin": 4667,
											"end": 4687,
											"name": "DUP2"
										},
										{
											"begin": 4667,
											"end": 4687,
											"name": "MSTORE"
										},
										{
											"begin": 4667,
											"end": 4687,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4667,
											"end": 4687,
											"name": "ADD"
										},
										{
											"begin": 4667,
											"end": 4687,
											"name": "SWAP1"
										},
										{
											"begin": 4667,
											"end": 4687,
											"name": "DUP2"
										},
										{
											"begin": 4667,
											"end": 4687,
											"name": "MSTORE"
										},
										{
											"begin": 4667,
											"end": 4687,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4667,
											"end": 4687,
											"name": "ADD"
										},
										{
											"begin": 4667,
											"end": 4687,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 4667,
											"end": 4687,
											"name": "KECCAK256"
										},
										{
											"begin": 4667,
											"end": 4687,
											"name": "SLOAD"
										},
										{
											"begin": 4667,
											"end": 4691,
											"name": "PUSH [tag]",
											"value": "34"
										},
										{
											"begin": 4667,
											"end": 4691,
											"name": "SWAP1"
										},
										{
											"begin": 4667,
											"end": 4699,
											"name": "SWAP2"
										},
										{
											"begin": 4667,
											"end": 4699,
											"name": "SWAP1"
										},
										{
											"begin": 4667,
											"end": 4699,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 4667,
											"end": 4699,
											"name": "AND"
										},
										{
											"begin": 4667,
											"end": 4699,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 4667,
											"end": 4699,
											"name": "tag",
											"value": "38"
										},
										{
											"begin": 4667,
											"end": 4699,
											"name": "JUMPDEST"
										},
										{
											"begin": 4644,
											"end": 4652,
											"name": "PUSH",
											"value": "3"
										},
										{
											"begin": 4644,
											"end": 4664,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 4653,
											"end": 4663,
											"name": "CALLER"
										},
										{
											"begin": 4644,
											"end": 4664,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4644,
											"end": 4664,
											"name": "AND"
										},
										{
											"begin": 4644,
											"end": 4664,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4644,
											"end": 4664,
											"name": "AND"
										},
										{
											"begin": 4644,
											"end": 4664,
											"name": "DUP2"
										},
										{
											"begin": 4644,
											"end": 4664,
											"name": "MSTORE"
										},
										{
											"begin": 4644,
											"end": 4664,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4644,
											"end": 4664,
											"name": "ADD"
										},
										{
											"begin": 4644,
											"end": 4664,
											"name": "SWAP1"
										},
										{
											"begin": 4644,
											"end": 4664,
											"name": "DUP2"
										},
										{
											"begin": 4644,
											"end": 4664,
											"name": "MSTORE"
										},
										{
											"begin": 4644,
											"end": 4664,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4644,
											"end": 4664,
											"name": "ADD"
										},
										{
											"begin": 4644,
											"end": 4664,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 4644,
											"end": 4664,
											"name": "KECCAK256"
										},
										{
											"begin": 4644,
											"end": 4699,
											"name": "DUP2"
										},
										{
											"begin": 4644,
											"end": 4699,
											"name": "SWAP1"
										},
										{
											"begin": 4644,
											"end": 4699,
											"name": "SSTORE"
										},
										{
											"begin": 4644,
											"end": 4699,
											"name": "POP"
										},
										{
											"begin": 4710,
											"end": 4715,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 4710,
											"end": 4715,
											"name": "DUP1"
										},
										{
											"begin": 4710,
											"end": 4715,
											"name": "SWAP1"
										},
										{
											"begin": 4710,
											"end": 4715,
											"name": "SLOAD"
										},
										{
											"begin": 4710,
											"end": 4715,
											"name": "SWAP1"
										},
										{
											"begin": 4710,
											"end": 4715,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 4710,
											"end": 4715,
											"name": "EXP"
										},
										{
											"begin": 4710,
											"end": 4715,
											"name": "SWAP1"
										},
										{
											"begin": 4710,
											"end": 4715,
											"name": "DIV"
										},
										{
											"begin": 4710,
											"end": 4715,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4710,
											"end": 4715,
											"name": "AND"
										},
										{
											"begin": 4710,
											"end": 4724,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4710,
											"end": 4724,
											"name": "AND"
										},
										{
											"begin": 4710,
											"end": 4735,
											"name": "PUSH",
											"value": "8FC"
										},
										{
											"begin": 4725,
											"end": 4734,
											"name": "CALLVALUE"
										},
										{
											"begin": 4710,
											"end": 4735,
											"name": "SWAP1"
										},
										{
											"begin": 4710,
											"end": 4735,
											"name": "DUP2"
										},
										{
											"begin": 4710,
											"end": 4735,
											"name": "ISZERO"
										},
										{
											"begin": 4710,
											"end": 4735,
											"name": "MUL"
										},
										{
											"begin": 4710,
											"end": 4735,
											"name": "SWAP1"
										},
										{
											"begin": 4710,
											"end": 4735,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 4710,
											"end": 4735,
											"name": "MLOAD"
										},
										{
											"begin": 4710,
											"end": 4735,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 4710,
											"end": 4735,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 4710,
											"end": 4735,
											"name": "MLOAD"
										},
										{
											"begin": 4710,
											"end": 4735,
											"name": "DUP1"
										},
										{
											"begin": 4710,
											"end": 4735,
											"name": "DUP4"
										},
										{
											"begin": 4710,
											"end": 4735,
											"name": "SUB"
										},
										{
											"begin": 4710,
											"end": 4735,
											"name": "DUP2"
										},
										{
											"begin": 4710,
											"end": 4735,
											"name": "DUP6"
										},
										{
											"begin": 4710,
											"end": 4735,
											"name": "DUP9"
										},
										{
											"begin": 4710,
											"end": 4735,
											"name": "DUP9"
										},
										{
											"begin": 4710,
											"end": 4735,
											"name": "CALL"
										},
										{
											"begin": 4710,
											"end": 4735,
											"name": "SWAP4"
										},
										{
											"begin": 4710,
											"end": 4735,
											"name": "POP"
										},
										{
											"begin": 4710,
											"end": 4735,
											"name": "POP"
										},
										{
											"begin": 4710,
											"end": 4735,
											"name": "POP"
										},
										{
											"begin": 4710,
											"end": 4735,
											"name": "POP"
										},
										{
											"begin": 4710,
											"end": 4735,
											"name": "ISZERO"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "39"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 45,
											"end": 61,
											"name": "RETURNDATASIZE"
										},
										{
											"begin": 42,
											"end": 43,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 39,
											"end": 40,
											"name": "DUP1"
										},
										{
											"begin": 24,
											"end": 62,
											"name": "RETURNDATACOPY"
										},
										{
											"begin": 77,
											"end": 93,
											"name": "RETURNDATASIZE"
										},
										{
											"begin": 74,
											"end": 75,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 67,
											"end": 94,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "39"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 4710,
											"end": 4735,
											"name": "POP"
										},
										{
											"begin": 4543,
											"end": 4743,
											"name": "POP"
										},
										{
											"begin": 4543,
											"end": 4743,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "tag",
											"value": "19"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "JUMPDEST"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "DUP1"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "SLOAD"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "DUP2"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "AND"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "ISZERO"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "MUL"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "SUB"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "AND"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "SWAP1"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "DIV"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "DUP1"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "PUSH",
											"value": "1F"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "ADD"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "DUP1"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "SWAP2"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "DIV"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "MUL"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "ADD"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "MLOAD"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "SWAP1"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "DUP2"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "ADD"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "MSTORE"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "DUP1"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "SWAP3"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "SWAP2"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "SWAP1"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "DUP2"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "DUP2"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "MSTORE"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "ADD"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "DUP3"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "DUP1"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "SLOAD"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "DUP2"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "AND"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "ISZERO"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "MUL"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "SUB"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "AND"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "SWAP1"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "DIV"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "DUP1"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "ISZERO"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "PUSH [tag]",
											"value": "40"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "JUMPI"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "DUP1"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "PUSH",
											"value": "1F"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "LT"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "PUSH [tag]",
											"value": "41"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "JUMPI"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "DUP1"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "DUP4"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "SLOAD"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "DIV"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "MUL"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "DUP4"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "MSTORE"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "SWAP2"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "ADD"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "SWAP2"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "PUSH [tag]",
											"value": "40"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "JUMP"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "tag",
											"value": "41"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "JUMPDEST"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "DUP3"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "ADD"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "SWAP2"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "SWAP1"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "MSTORE"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "KECCAK256"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "SWAP1"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "tag",
											"value": "42"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "JUMPDEST"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "DUP2"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "SLOAD"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "DUP2"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "MSTORE"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "SWAP1"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "ADD"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "SWAP1"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "ADD"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "DUP1"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "DUP4"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "GT"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "PUSH [tag]",
											"value": "42"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "JUMPI"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "DUP3"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "SWAP1"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "SUB"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "PUSH",
											"value": "1F"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "AND"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "DUP3"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "ADD"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "SWAP2"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "tag",
											"value": "40"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "JUMPDEST"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "POP"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "POP"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "POP"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "POP"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "POP"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "DUP2"
										},
										{
											"begin": 3731,
											"end": 3759,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 4223,
											"end": 4426,
											"name": "tag",
											"value": "27"
										},
										{
											"begin": 4223,
											"end": 4426,
											"name": "JUMPDEST"
										},
										{
											"begin": 4314,
											"end": 4345,
											"name": "PUSH [tag]",
											"value": "44"
										},
										{
											"begin": 4339,
											"end": 4344,
											"name": "DUP2"
										},
										{
											"begin": 4314,
											"end": 4322,
											"name": "PUSH",
											"value": "3"
										},
										{
											"begin": 4314,
											"end": 4334,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 4323,
											"end": 4333,
											"name": "CALLER"
										},
										{
											"begin": 4314,
											"end": 4334,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4314,
											"end": 4334,
											"name": "AND"
										},
										{
											"begin": 4314,
											"end": 4334,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4314,
											"end": 4334,
											"name": "AND"
										},
										{
											"begin": 4314,
											"end": 4334,
											"name": "DUP2"
										},
										{
											"begin": 4314,
											"end": 4334,
											"name": "MSTORE"
										},
										{
											"begin": 4314,
											"end": 4334,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4314,
											"end": 4334,
											"name": "ADD"
										},
										{
											"begin": 4314,
											"end": 4334,
											"name": "SWAP1"
										},
										{
											"begin": 4314,
											"end": 4334,
											"name": "DUP2"
										},
										{
											"begin": 4314,
											"end": 4334,
											"name": "MSTORE"
										},
										{
											"begin": 4314,
											"end": 4334,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4314,
											"end": 4334,
											"name": "ADD"
										},
										{
											"begin": 4314,
											"end": 4334,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 4314,
											"end": 4334,
											"name": "KECCAK256"
										},
										{
											"begin": 4314,
											"end": 4334,
											"name": "SLOAD"
										},
										{
											"begin": 4314,
											"end": 4338,
											"name": "PUSH [tag]",
											"value": "45"
										},
										{
											"begin": 4314,
											"end": 4338,
											"name": "SWAP1"
										},
										{
											"begin": 4314,
											"end": 4345,
											"name": "SWAP2"
										},
										{
											"begin": 4314,
											"end": 4345,
											"name": "SWAP1"
										},
										{
											"begin": 4314,
											"end": 4345,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 4314,
											"end": 4345,
											"name": "AND"
										},
										{
											"begin": 4314,
											"end": 4345,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 4314,
											"end": 4345,
											"name": "tag",
											"value": "44"
										},
										{
											"begin": 4314,
											"end": 4345,
											"name": "JUMPDEST"
										},
										{
											"begin": 4291,
											"end": 4299,
											"name": "PUSH",
											"value": "3"
										},
										{
											"begin": 4291,
											"end": 4311,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 4300,
											"end": 4310,
											"name": "CALLER"
										},
										{
											"begin": 4291,
											"end": 4311,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4291,
											"end": 4311,
											"name": "AND"
										},
										{
											"begin": 4291,
											"end": 4311,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4291,
											"end": 4311,
											"name": "AND"
										},
										{
											"begin": 4291,
											"end": 4311,
											"name": "DUP2"
										},
										{
											"begin": 4291,
											"end": 4311,
											"name": "MSTORE"
										},
										{
											"begin": 4291,
											"end": 4311,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4291,
											"end": 4311,
											"name": "ADD"
										},
										{
											"begin": 4291,
											"end": 4311,
											"name": "SWAP1"
										},
										{
											"begin": 4291,
											"end": 4311,
											"name": "DUP2"
										},
										{
											"begin": 4291,
											"end": 4311,
											"name": "MSTORE"
										},
										{
											"begin": 4291,
											"end": 4311,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4291,
											"end": 4311,
											"name": "ADD"
										},
										{
											"begin": 4291,
											"end": 4311,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 4291,
											"end": 4311,
											"name": "KECCAK256"
										},
										{
											"begin": 4291,
											"end": 4345,
											"name": "DUP2"
										},
										{
											"begin": 4291,
											"end": 4345,
											"name": "SWAP1"
										},
										{
											"begin": 4291,
											"end": 4345,
											"name": "SSTORE"
										},
										{
											"begin": 4291,
											"end": 4345,
											"name": "POP"
										},
										{
											"begin": 4378,
											"end": 4408,
											"name": "PUSH [tag]",
											"value": "46"
										},
										{
											"begin": 4402,
											"end": 4407,
											"name": "DUP2"
										},
										{
											"begin": 4378,
											"end": 4386,
											"name": "PUSH",
											"value": "3"
										},
										{
											"begin": 4378,
											"end": 4397,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 4387,
											"end": 4396,
											"name": "DUP6"
										},
										{
											"begin": 4378,
											"end": 4397,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4378,
											"end": 4397,
											"name": "AND"
										},
										{
											"begin": 4378,
											"end": 4397,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4378,
											"end": 4397,
											"name": "AND"
										},
										{
											"begin": 4378,
											"end": 4397,
											"name": "DUP2"
										},
										{
											"begin": 4378,
											"end": 4397,
											"name": "MSTORE"
										},
										{
											"begin": 4378,
											"end": 4397,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4378,
											"end": 4397,
											"name": "ADD"
										},
										{
											"begin": 4378,
											"end": 4397,
											"name": "SWAP1"
										},
										{
											"begin": 4378,
											"end": 4397,
											"name": "DUP2"
										},
										{
											"begin": 4378,
											"end": 4397,
											"name": "MSTORE"
										},
										{
											"begin": 4378,
											"end": 4397,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4378,
											"end": 4397,
											"name": "ADD"
										},
										{
											"begin": 4378,
											"end": 4397,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 4378,
											"end": 4397,
											"name": "KECCAK256"
										},
										{
											"begin": 4378,
											"end": 4397,
											"name": "SLOAD"
										},
										{
											"begin": 4378,
											"end": 4401,
											"name": "PUSH [tag]",
											"value": "34"
										},
										{
											"begin": 4378,
											"end": 4401,
											"name": "SWAP1"
										},
										{
											"begin": 4378,
											"end": 4408,
											"name": "SWAP2"
										},
										{
											"begin": 4378,
											"end": 4408,
											"name": "SWAP1"
										},
										{
											"begin": 4378,
											"end": 4408,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 4378,
											"end": 4408,
											"name": "AND"
										},
										{
											"begin": 4378,
											"end": 4408,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 4378,
											"end": 4408,
											"name": "tag",
											"value": "46"
										},
										{
											"begin": 4378,
											"end": 4408,
											"name": "JUMPDEST"
										},
										{
											"begin": 4356,
											"end": 4364,
											"name": "PUSH",
											"value": "3"
										},
										{
											"begin": 4356,
											"end": 4375,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 4365,
											"end": 4374,
											"name": "DUP5"
										},
										{
											"begin": 4356,
											"end": 4375,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4356,
											"end": 4375,
											"name": "AND"
										},
										{
											"begin": 4356,
											"end": 4375,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4356,
											"end": 4375,
											"name": "AND"
										},
										{
											"begin": 4356,
											"end": 4375,
											"name": "DUP2"
										},
										{
											"begin": 4356,
											"end": 4375,
											"name": "MSTORE"
										},
										{
											"begin": 4356,
											"end": 4375,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4356,
											"end": 4375,
											"name": "ADD"
										},
										{
											"begin": 4356,
											"end": 4375,
											"name": "SWAP1"
										},
										{
											"begin": 4356,
											"end": 4375,
											"name": "DUP2"
										},
										{
											"begin": 4356,
											"end": 4375,
											"name": "MSTORE"
										},
										{
											"begin": 4356,
											"end": 4375,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4356,
											"end": 4375,
											"name": "ADD"
										},
										{
											"begin": 4356,
											"end": 4375,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 4356,
											"end": 4375,
											"name": "KECCAK256"
										},
										{
											"begin": 4356,
											"end": 4408,
											"name": "DUP2"
										},
										{
											"begin": 4356,
											"end": 4408,
											"name": "SWAP1"
										},
										{
											"begin": 4356,
											"end": 4408,
											"name": "SSTORE"
										},
										{
											"begin": 4356,
											"end": 4408,
											"name": "POP"
										},
										{
											"begin": 4223,
											"end": 4426,
											"name": "POP"
										},
										{
											"begin": 4223,
											"end": 4426,
											"name": "POP"
										},
										{
											"begin": 4223,
											"end": 4426,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 4022,
											"end": 4112,
											"name": "tag",
											"value": "30"
										},
										{
											"begin": 4022,
											"end": 4112,
											"name": "JUMPDEST"
										},
										{
											"begin": 4061,
											"end": 4065,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 4084,
											"end": 4092,
											"name": "PUSH",
											"value": "3"
										},
										{
											"begin": 4084,
											"end": 4104,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 4093,
											"end": 4103,
											"name": "CALLER"
										},
										{
											"begin": 4084,
											"end": 4104,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4084,
											"end": 4104,
											"name": "AND"
										},
										{
											"begin": 4084,
											"end": 4104,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4084,
											"end": 4104,
											"name": "AND"
										},
										{
											"begin": 4084,
											"end": 4104,
											"name": "DUP2"
										},
										{
											"begin": 4084,
											"end": 4104,
											"name": "MSTORE"
										},
										{
											"begin": 4084,
											"end": 4104,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4084,
											"end": 4104,
											"name": "ADD"
										},
										{
											"begin": 4084,
											"end": 4104,
											"name": "SWAP1"
										},
										{
											"begin": 4084,
											"end": 4104,
											"name": "DUP2"
										},
										{
											"begin": 4084,
											"end": 4104,
											"name": "MSTORE"
										},
										{
											"begin": 4084,
											"end": 4104,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4084,
											"end": 4104,
											"name": "ADD"
										},
										{
											"begin": 4084,
											"end": 4104,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 4084,
											"end": 4104,
											"name": "KECCAK256"
										},
										{
											"begin": 4084,
											"end": 4104,
											"name": "SLOAD"
										},
										{
											"begin": 4077,
											"end": 4104,
											"name": "SWAP1"
										},
										{
											"begin": 4077,
											"end": 4104,
											"name": "POP"
										},
										{
											"begin": 4022,
											"end": 4112,
											"name": "SWAP1"
										},
										{
											"begin": 4022,
											"end": 4112,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 834,
											"end": 1010,
											"name": "tag",
											"value": "34"
										},
										{
											"begin": 834,
											"end": 1010,
											"name": "JUMPDEST"
										},
										{
											"begin": 892,
											"end": 899,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 911,
											"end": 920,
											"name": "DUP1"
										},
										{
											"begin": 927,
											"end": 928,
											"name": "DUP3"
										},
										{
											"begin": 923,
											"end": 924,
											"name": "DUP5"
										},
										{
											"begin": 923,
											"end": 928,
											"name": "ADD"
										},
										{
											"begin": 911,
											"end": 928,
											"name": "SWAP1"
										},
										{
											"begin": 911,
											"end": 928,
											"name": "POP"
										},
										{
											"begin": 951,
											"end": 952,
											"name": "DUP4"
										},
										{
											"begin": 946,
											"end": 947,
											"name": "DUP2"
										},
										{
											"begin": 946,
											"end": 952,
											"name": "LT"
										},
										{
											"begin": 946,
											"end": 952,
											"name": "ISZERO"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "PUSH [tag]",
											"value": "49"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "JUMPI"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "MLOAD"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "PUSH",
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "DUP2"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "MSTORE"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "ADD"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "DUP1"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "DUP1"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "ADD"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "DUP3"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "DUP2"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "SUB"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "DUP3"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "MSTORE"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "PUSH",
											"value": "1B"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "DUP2"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "MSTORE"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "ADD"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "DUP1"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "PUSH",
											"value": "536166654D6174683A206164646974696F6E206F766572666C6F770000000000"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "DUP2"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "MSTORE"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "POP"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "ADD"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "SWAP2"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "POP"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "POP"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "MLOAD"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "DUP1"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "SWAP2"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "SUB"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "SWAP1"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "REVERT"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "tag",
											"value": "49"
										},
										{
											"begin": 938,
											"end": 984,
											"name": "JUMPDEST"
										},
										{
											"begin": 1002,
											"end": 1003,
											"name": "DUP1"
										},
										{
											"begin": 995,
											"end": 1003,
											"name": "SWAP2"
										},
										{
											"begin": 995,
											"end": 1003,
											"name": "POP"
										},
										{
											"begin": 995,
											"end": 1003,
											"name": "POP"
										},
										{
											"begin": 834,
											"end": 1010,
											"name": "SWAP3"
										},
										{
											"begin": 834,
											"end": 1010,
											"name": "SWAP2"
										},
										{
											"begin": 834,
											"end": 1010,
											"name": "POP"
										},
										{
											"begin": 834,
											"end": 1010,
											"name": "POP"
										},
										{
											"begin": 834,
											"end": 1010,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 2159,
											"end": 2618,
											"name": "tag",
											"value": "37"
										},
										{
											"begin": 2159,
											"end": 2618,
											"name": "JUMPDEST"
										},
										{
											"begin": 2217,
											"end": 2224,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 2463,
											"end": 2464,
											"name": "DUP1"
										},
										{
											"begin": 2458,
											"end": 2459,
											"name": "DUP4"
										},
										{
											"begin": 2458,
											"end": 2464,
											"name": "EQ"
										},
										{
											"begin": 2454,
											"end": 2499,
											"name": "ISZERO"
										},
										{
											"begin": 2454,
											"end": 2499,
											"name": "PUSH [tag]",
											"value": "51"
										},
										{
											"begin": 2454,
											"end": 2499,
											"name": "JUMPI"
										},
										{
											"begin": 2487,
											"end": 2488,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 2480,
											"end": 2488,
											"name": "SWAP1"
										},
										{
											"begin": 2480,
											"end": 2488,
											"name": "POP"
										},
										{
											"begin": 2480,
											"end": 2488,
											"name": "PUSH [tag]",
											"value": "50"
										},
										{
											"begin": 2480,
											"end": 2488,
											"name": "JUMP"
										},
										{
											"begin": 2454,
											"end": 2499,
											"name": "tag",
											"value": "51"
										},
										{
											"begin": 2454,
											"end": 2499,
											"name": "JUMPDEST"
										},
										{
											"begin": 2509,
											"end": 2518,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 2525,
											"end": 2526,
											"name": "DUP3"
										},
										{
											"begin": 2521,
											"end": 2522,
											"name": "DUP5"
										},
										{
											"begin": 2521,
											"end": 2526,
											"name": "MUL"
										},
										{
											"begin": 2509,
											"end": 2526,
											"name": "SWAP1"
										},
										{
											"begin": 2509,
											"end": 2526,
											"name": "POP"
										},
										{
											"begin": 2553,
											"end": 2554,
											"name": "DUP3"
										},
										{
											"begin": 2548,
											"end": 2549,
											"name": "DUP5"
										},
										{
											"begin": 2544,
											"end": 2545,
											"name": "DUP3"
										},
										{
											"begin": 2544,
											"end": 2549,
											"name": "DUP2"
										},
										{
											"begin": 2544,
											"end": 2549,
											"name": "PUSH [tag]",
											"value": "52"
										},
										{
											"begin": 2544,
											"end": 2549,
											"name": "JUMPI"
										},
										{
											"begin": 2544,
											"end": 2549,
											"name": "INVALID"
										},
										{
											"begin": 2544,
											"end": 2549,
											"name": "tag",
											"value": "52"
										},
										{
											"begin": 2544,
											"end": 2549,
											"name": "JUMPDEST"
										},
										{
											"begin": 2544,
											"end": 2549,
											"name": "DIV"
										},
										{
											"begin": 2544,
											"end": 2554,
											"name": "EQ"
										},
										{
											"begin": 2536,
											"end": 2592,
											"name": "PUSH [tag]",
											"value": "53"
										},
										{
											"begin": 2536,
											"end": 2592,
											"name": "JUMPI"
										},
										{
											"begin": 2536,
											"end": 2592,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 2536,
											"end": 2592,
											"name": "MLOAD"
										},
										{
											"begin": 2536,
											"end": 2592,
											"name": "PUSH",
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2536,
											"end": 2592,
											"name": "DUP2"
										},
										{
											"begin": 2536,
											"end": 2592,
											"name": "MSTORE"
										},
										{
											"begin": 2536,
											"end": 2592,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 2536,
											"end": 2592,
											"name": "ADD"
										},
										{
											"begin": 2536,
											"end": 2592,
											"name": "DUP1"
										},
										{
											"begin": 2536,
											"end": 2592,
											"name": "DUP1"
										},
										{
											"begin": 2536,
											"end": 2592,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2536,
											"end": 2592,
											"name": "ADD"
										},
										{
											"begin": 2536,
											"end": 2592,
											"name": "DUP3"
										},
										{
											"begin": 2536,
											"end": 2592,
											"name": "DUP2"
										},
										{
											"begin": 2536,
											"end": 2592,
											"name": "SUB"
										},
										{
											"begin": 2536,
											"end": 2592,
											"name": "DUP3"
										},
										{
											"begin": 2536,
											"end": 2592,
											"name": "MSTORE"
										},
										{
											"begin": 2536,
											"end": 2592,
											"name": "PUSH",
											"value": "21"
										},
										{
											"begin": 2536,
											"end": 2592,
											"name": "DUP2"
										},
										{
											"begin": 2536,
											"end": 2592,
											"name": "MSTORE"
										},
										{
											"begin": 2536,
											"end": 2592,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2536,
											"end": 2592,
											"name": "ADD"
										},
										{
											"begin": 2536,
											"end": 2592,
											"name": "DUP1"
										},
										{
											"begin": 2536,
											"end": 2592,
											"name": "PUSH data",
											"value": "9113BB53C2876A3805B2C9242029423FC540A728243CE887AB24C82CF119FBA3"
										},
										{
											"begin": 2536,
											"end": 2592,
											"name": "PUSH",
											"value": "21"
										},
										{
											"begin": 2536,
											"end": 2592,
											"name": "SWAP2"
										},
										{
											"begin": 2536,
											"end": 2592,
											"name": "CODECOPY"
										},
										{
											"begin": 2536,
											"end": 2592,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 2536,
											"end": 2592,
											"name": "ADD"
										},
										{
											"begin": 2536,
											"end": 2592,
											"name": "SWAP2"
										},
										{
											"begin": 2536,
											"end": 2592,
											"name": "POP"
										},
										{
											"begin": 2536,
											"end": 2592,
											"name": "POP"
										},
										{
											"begin": 2536,
											"end": 2592,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 2536,
											"end": 2592,
											"name": "MLOAD"
										},
										{
											"begin": 2536,
											"end": 2592,
											"name": "DUP1"
										},
										{
											"begin": 2536,
											"end": 2592,
											"name": "SWAP2"
										},
										{
											"begin": 2536,
											"end": 2592,
											"name": "SUB"
										},
										{
											"begin": 2536,
											"end": 2592,
											"name": "SWAP1"
										},
										{
											"begin": 2536,
											"end": 2592,
											"name": "REVERT"
										},
										{
											"begin": 2536,
											"end": 2592,
											"name": "tag",
											"value": "53"
										},
										{
											"begin": 2536,
											"end": 2592,
											"name": "JUMPDEST"
										},
										{
											"begin": 2610,
											"end": 2611,
											"name": "DUP1"
										},
										{
											"begin": 2603,
											"end": 2611,
											"name": "SWAP2"
										},
										{
											"begin": 2603,
											"end": 2611,
											"name": "POP"
										},
										{
											"begin": 2603,
											"end": 2611,
											"name": "POP"
										},
										{
											"begin": 2159,
											"end": 2618,
											"name": "tag",
											"value": "50"
										},
										{
											"begin": 2159,
											"end": 2618,
											"name": "JUMPDEST"
										},
										{
											"begin": 2159,
											"end": 2618,
											"name": "SWAP3"
										},
										{
											"begin": 2159,
											"end": 2618,
											"name": "SWAP2"
										},
										{
											"begin": 2159,
											"end": 2618,
											"name": "POP"
										},
										{
											"begin": 2159,
											"end": 2618,
											"name": "POP"
										},
										{
											"begin": 2159,
											"end": 2618,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 1274,
											"end": 1408,
											"name": "tag",
											"value": "45"
										},
										{
											"begin": 1274,
											"end": 1408,
											"name": "JUMPDEST"
										},
										{
											"begin": 1332,
											"end": 1339,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1358,
											"end": 1401,
											"name": "PUSH [tag]",
											"value": "55"
										},
										{
											"begin": 1362,
											"end": 1363,
											"name": "DUP4"
										},
										{
											"begin": 1365,
											"end": 1366,
											"name": "DUP4"
										},
										{
											"begin": 1358,
											"end": 1401,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 1358,
											"end": 1401,
											"name": "MLOAD"
										},
										{
											"begin": 1358,
											"end": 1401,
											"name": "DUP1"
										},
										{
											"begin": 1358,
											"end": 1401,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 1358,
											"end": 1401,
											"name": "ADD"
										},
										{
											"begin": 1358,
											"end": 1401,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 1358,
											"end": 1401,
											"name": "MSTORE"
										},
										{
											"begin": 1358,
											"end": 1401,
											"name": "DUP1"
										},
										{
											"begin": 1358,
											"end": 1401,
											"name": "PUSH",
											"value": "1E"
										},
										{
											"begin": 1358,
											"end": 1401,
											"name": "DUP2"
										},
										{
											"begin": 1358,
											"end": 1401,
											"name": "MSTORE"
										},
										{
											"begin": 1358,
											"end": 1401,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1358,
											"end": 1401,
											"name": "ADD"
										},
										{
											"begin": 1358,
											"end": 1401,
											"name": "PUSH",
											"value": "536166654D6174683A207375627472616374696F6E206F766572666C6F770000"
										},
										{
											"begin": 1358,
											"end": 1401,
											"name": "DUP2"
										},
										{
											"begin": 1358,
											"end": 1401,
											"name": "MSTORE"
										},
										{
											"begin": 1358,
											"end": 1401,
											"name": "POP"
										},
										{
											"begin": 1358,
											"end": 1361,
											"name": "PUSH [tag]",
											"value": "56"
										},
										{
											"begin": 1358,
											"end": 1401,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 1358,
											"end": 1401,
											"name": "tag",
											"value": "55"
										},
										{
											"begin": 1358,
											"end": 1401,
											"name": "JUMPDEST"
										},
										{
											"begin": 1351,
											"end": 1401,
											"name": "SWAP1"
										},
										{
											"begin": 1351,
											"end": 1401,
											"name": "POP"
										},
										{
											"begin": 1274,
											"end": 1408,
											"name": "SWAP3"
										},
										{
											"begin": 1274,
											"end": 1408,
											"name": "SWAP2"
										},
										{
											"begin": 1274,
											"end": 1408,
											"name": "POP"
										},
										{
											"begin": 1274,
											"end": 1408,
											"name": "POP"
										},
										{
											"begin": 1274,
											"end": 1408,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 1732,
											"end": 1919,
											"name": "tag",
											"value": "56"
										},
										{
											"begin": 1732,
											"end": 1919,
											"name": "JUMPDEST"
										},
										{
											"begin": 1818,
											"end": 1825,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1850,
											"end": 1851,
											"name": "DUP4"
										},
										{
											"begin": 1845,
											"end": 1846,
											"name": "DUP4"
										},
										{
											"begin": 1845,
											"end": 1851,
											"name": "GT"
										},
										{
											"begin": 1845,
											"end": 1851,
											"name": "ISZERO"
										},
										{
											"begin": 1853,
											"end": 1865,
											"name": "DUP3"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "SWAP1"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "PUSH [tag]",
											"value": "58"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "JUMPI"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "MLOAD"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "PUSH",
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "DUP2"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "MSTORE"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "ADD"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "DUP1"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "DUP1"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "ADD"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "DUP3"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "DUP2"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "SUB"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "DUP3"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "MSTORE"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "DUP4"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "DUP2"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "DUP2"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "MLOAD"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "DUP2"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "MSTORE"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "ADD"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "SWAP2"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "POP"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "DUP1"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "MLOAD"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "SWAP1"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "ADD"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "SWAP1"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "DUP1"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "DUP4"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "DUP4"
										},
										{
											"begin": 23,
											"end": 24,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "tag",
											"value": "59"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "JUMPDEST"
										},
										{
											"begin": 33,
											"end": 36,
											"name": "DUP4"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "DUP2"
										},
										{
											"begin": 27,
											"end": 37,
											"name": "LT"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "ISZERO"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "PUSH [tag]",
											"value": "61"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "JUMPI"
										},
										{
											"begin": 99,
											"end": 100,
											"name": "DUP1"
										},
										{
											"begin": 94,
											"end": 97,
											"name": "DUP3"
										},
										{
											"begin": 90,
											"end": 101,
											"name": "ADD"
										},
										{
											"begin": 84,
											"end": 102,
											"name": "MLOAD"
										},
										{
											"begin": 80,
											"end": 81,
											"name": "DUP2"
										},
										{
											"begin": 75,
											"end": 78,
											"name": "DUP5"
										},
										{
											"begin": 71,
											"end": 82,
											"name": "ADD"
										},
										{
											"begin": 64,
											"end": 103,
											"name": "MSTORE"
										},
										{
											"begin": 52,
											"end": 54,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 49,
											"end": 50,
											"name": "DUP2"
										},
										{
											"begin": 45,
											"end": 55,
											"name": "ADD"
										},
										{
											"begin": 40,
											"end": 55,
											"name": "SWAP1"
										},
										{
											"begin": 40,
											"end": 55,
											"name": "POP"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "PUSH [tag]",
											"value": "59"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "JUMP"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "tag",
											"value": "61"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "JUMPDEST"
										},
										{
											"begin": 12,
											"end": 26,
											"name": "POP"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "POP"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "POP"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "POP"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "SWAP1"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "POP"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "SWAP1"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "DUP2"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "ADD"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "SWAP1"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "PUSH",
											"value": "1F"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "AND"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "DUP1"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "ISZERO"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "PUSH [tag]",
											"value": "62"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "JUMPI"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "DUP1"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "DUP3"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "SUB"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "DUP1"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "MLOAD"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "DUP4"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "SUB"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "EXP"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "SUB"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "NOT"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "AND"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "DUP2"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "MSTORE"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "ADD"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "SWAP2"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "POP"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "tag",
											"value": "62"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "JUMPDEST"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "POP"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "SWAP3"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "POP"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "POP"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "POP"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "MLOAD"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "DUP1"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "SWAP2"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "SUB"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "SWAP1"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "REVERT"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "tag",
											"value": "58"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "JUMPDEST"
										},
										{
											"begin": 1837,
											"end": 1866,
											"name": "POP"
										},
										{
											"begin": 1876,
											"end": 1885,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1892,
											"end": 1893,
											"name": "DUP4"
										},
										{
											"begin": 1888,
											"end": 1889,
											"name": "DUP6"
										},
										{
											"begin": 1888,
											"end": 1893,
											"name": "SUB"
										},
										{
											"begin": 1876,
											"end": 1893,
											"name": "SWAP1"
										},
										{
											"begin": 1876,
											"end": 1893,
											"name": "POP"
										},
										{
											"begin": 1911,
											"end": 1912,
											"name": "DUP1"
										},
										{
											"begin": 1904,
											"end": 1912,
											"name": "SWAP2"
										},
										{
											"begin": 1904,
											"end": 1912,
											"name": "POP"
										},
										{
											"begin": 1904,
											"end": 1912,
											"name": "POP"
										},
										{
											"begin": 1732,
											"end": 1919,
											"name": "SWAP4"
										},
										{
											"begin": 1732,
											"end": 1919,
											"name": "SWAP3"
										},
										{
											"begin": 1732,
											"end": 1919,
											"name": "POP"
										},
										{
											"begin": 1732,
											"end": 1919,
											"name": "POP"
										},
										{
											"begin": 1732,
											"end": 1919,
											"name": "POP"
										},
										{
											"begin": 1732,
											"end": 1919,
											"name": "JUMP",
											"value": "[out]"
										}
									],
									".data": {
										"9113BB53C2876A3805B2C9242029423FC540A728243CE887AB24C82CF119FBA3": "536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77"
									}
								}
							}
						},
						"methodIdentifiers": {
							"balance()": "b69ef8a8",
							"exchange_rate()": "171ef0b2",
							"mint(address,uint256)": "40c10f19",
							"purchase()": "64edfbf0",
							"symbol()": "95d89b41",
							"transfer(address,uint256)": "a9059cbb"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchange_rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":\"XP_Token\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"21-Advanced-Solidity/1/05-Stu_XP_Token.sol\":{\"keccak256\":\"0x5fb90111d05501742f82594f10b10997038af49b80651b371e5eae63307c0498\",\"urls\":[\"bzz-raw://2a0aaa8a44cd01a57b72aeb66e387c33bd8a2c47e158a83d14c70b9a1656896a\",\"dweb:/ipfs/QmRMCjsCSYudvc5kcwbyPjsGa3Db3iNqfU4WzLzzVWi97c\"]},\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":{\"keccak256\":\"0x640b6dee7a4b830bdfd52b5031a07fc2b12209f5b2e29e5d364a7d37f69d8076\",\"urls\":[\"bzz-raw://31113152e1ddb78fe7a4197f247591ca894e93f916867beb708d8e747b6cc74f\",\"dweb:/ipfs/QmbZaJyXdpsYGykVhHH9qpVGQg9DGCxE2QufbCUy3daTgq\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 9,
								"contract": "21-Advanced-Solidity/1/05-Stu_XP_Token.sol:XP_Token",
								"label": "owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address_payable"
							},
							{
								"astId": 12,
								"contract": "21-Advanced-Solidity/1/05-Stu_XP_Token.sol:XP_Token",
								"label": "symbol",
								"offset": 0,
								"slot": "1",
								"type": "t_string_storage"
							},
							{
								"astId": 15,
								"contract": "21-Advanced-Solidity/1/05-Stu_XP_Token.sol:XP_Token",
								"label": "exchange_rate",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 19,
								"contract": "21-Advanced-Solidity/1/05-Stu_XP_Token.sol:XP_Token",
								"label": "balances",
								"offset": 0,
								"slot": "3",
								"type": "t_mapping(t_address,t_uint256)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_address_payable": {
								"encoding": "inplace",
								"label": "address payable",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"methods": {}
					}
				}
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol": {
				"SafeMath": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers over Solidity's arithmetic operations with added overflow checks. * Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. * Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.",
						"methods": {}
					},
					"evm": {
						"assembly": "    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":589:5297  library SafeMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n    /* \"--CODEGEN--\":132:134   */\n  0x0b\n    /* \"--CODEGEN--\":166:173   */\n  dup3\n    /* \"--CODEGEN--\":155:164   */\n  dup3\n    /* \"--CODEGEN--\":146:153   */\n  dup3\n    /* \"--CODEGEN--\":137:174   */\n  codecopy\n    /* \"--CODEGEN--\":255:262   */\n  dup1\n    /* \"--CODEGEN--\":249:263   */\n  mload\n    /* \"--CODEGEN--\":246:247   */\n  0x00\n    /* \"--CODEGEN--\":241:264   */\n  byte\n    /* \"--CODEGEN--\":235:239   */\n  0x73\n    /* \"--CODEGEN--\":232:265   */\n  eq\n    /* \"--CODEGEN--\":222:224   */\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":269:278   */\n  invalid\n    /* \"--CODEGEN--\":222:224   */\ntag_1:\n    /* \"--CODEGEN--\":293:302   */\n  address\n    /* \"--CODEGEN--\":290:291   */\n  0x00\n    /* \"--CODEGEN--\":283:303   */\n  mstore\n    /* \"--CODEGEN--\":323:327   */\n  0x73\n    /* \"--CODEGEN--\":314:321   */\n  dup2\n    /* \"--CODEGEN--\":306:328   */\n  mstore8\n    /* \"--CODEGEN--\":347:354   */\n  dup3\n    /* \"--CODEGEN--\":338:345   */\n  dup2\n    /* \"--CODEGEN--\":331:355   */\n  return\nstop\n\nsub_0: assembly {\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":589:5297  library SafeMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa265627a7a72315820b1b06cc0c7e83338d77cb2b31b4d689fd7695bc9069c6d7b59db8259af90fbc164736f6c63430005110032\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a72315820b1b06cc0c7e83338d77cb2b31b4d689fd7695bc9069c6d7b59db8259af90fbc164736f6c63430005110032",
							"opcodes": "PUSH1 0x55 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 0xB1 0xB0 PUSH13 0xC0C7E83338D77CB2B31B4D689F 0xD7 PUSH10 0x5BC9069C6D7B59DB8259 0xAF SWAP1 0xFB 0xC1 PUSH5 0x736F6C6343 STOP SDIV GT STOP ORIGIN ",
							"sourceMap": "589:4708:1:-;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24"
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a72315820b1b06cc0c7e83338d77cb2b31b4d689fd7695bc9069c6d7b59db8259af90fbc164736f6c63430005110032",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 0xB1 0xB0 PUSH13 0xC0C7E83338D77CB2B31B4D689F 0xD7 PUSH10 0x5BC9069C6D7B59DB8259 0xAF SWAP1 0xFB 0xC1 PUSH5 0x736F6C6343 STOP SDIV GT STOP ORIGIN ",
							"sourceMap": "589:4708:1:-;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "94",
								"totalCost": "17094"
							},
							"internal": {
								"add(uint256,uint256)": "infinite",
								"div(uint256,uint256)": "infinite",
								"div(uint256,uint256,string memory)": "infinite",
								"mod(uint256,uint256)": "infinite",
								"mod(uint256,uint256,string memory)": "infinite",
								"mul(uint256,uint256)": "infinite",
								"sub(uint256,uint256)": "infinite",
								"sub(uint256,uint256,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 589,
									"end": 5297,
									"name": "PUSH #[$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 589,
									"end": 5297,
									"name": "PUSH [$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 132,
									"end": 134,
									"name": "PUSH",
									"value": "B"
								},
								{
									"begin": 166,
									"end": 173,
									"name": "DUP3"
								},
								{
									"begin": 155,
									"end": 164,
									"name": "DUP3"
								},
								{
									"begin": 146,
									"end": 153,
									"name": "DUP3"
								},
								{
									"begin": 137,
									"end": 174,
									"name": "CODECOPY"
								},
								{
									"begin": 255,
									"end": 262,
									"name": "DUP1"
								},
								{
									"begin": 249,
									"end": 263,
									"name": "MLOAD"
								},
								{
									"begin": 246,
									"end": 247,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 241,
									"end": 264,
									"name": "BYTE"
								},
								{
									"begin": 235,
									"end": 239,
									"name": "PUSH",
									"value": "73"
								},
								{
									"begin": 232,
									"end": 265,
									"name": "EQ"
								},
								{
									"begin": 222,
									"end": 224,
									"name": "PUSH [tag]",
									"value": "1"
								},
								{
									"begin": 222,
									"end": 224,
									"name": "JUMPI"
								},
								{
									"begin": 269,
									"end": 278,
									"name": "INVALID"
								},
								{
									"begin": 222,
									"end": 224,
									"name": "tag",
									"value": "1"
								},
								{
									"begin": 222,
									"end": 224,
									"name": "JUMPDEST"
								},
								{
									"begin": 293,
									"end": 302,
									"name": "ADDRESS"
								},
								{
									"begin": 290,
									"end": 291,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 283,
									"end": 303,
									"name": "MSTORE"
								},
								{
									"begin": 323,
									"end": 327,
									"name": "PUSH",
									"value": "73"
								},
								{
									"begin": 314,
									"end": 321,
									"name": "DUP2"
								},
								{
									"begin": 306,
									"end": 328,
									"name": "MSTORE8"
								},
								{
									"begin": 347,
									"end": 354,
									"name": "DUP3"
								},
								{
									"begin": 338,
									"end": 345,
									"name": "DUP2"
								},
								{
									"begin": 331,
									"end": 355,
									"name": "RETURN"
								}
							],
							".data": {
								"0": {
									".auxdata": "a265627a7a72315820b1b06cc0c7e83338d77cb2b31b4d689fd7695bc9069c6d7b59db8259af90fbc164736f6c63430005110032",
									".code": [
										{
											"begin": 589,
											"end": 5297,
											"name": "PUSHDEPLOYADDRESS"
										},
										{
											"begin": 589,
											"end": 5297,
											"name": "ADDRESS"
										},
										{
											"begin": 589,
											"end": 5297,
											"name": "EQ"
										},
										{
											"begin": 589,
											"end": 5297,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": 589,
											"end": 5297,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 589,
											"end": 5297,
											"name": "MSTORE"
										},
										{
											"begin": 589,
											"end": 5297,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 589,
											"end": 5297,
											"name": "DUP1"
										},
										{
											"begin": 589,
											"end": 5297,
											"name": "REVERT"
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations with added overflow checks. * Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. * Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.\",\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\":{\"keccak256\":\"0x640b6dee7a4b830bdfd52b5031a07fc2b12209f5b2e29e5d364a7d37f69d8076\",\"urls\":[\"bzz-raw://31113152e1ddb78fe7a4197f247591ca894e93f916867beb708d8e747b6cc74f\",\"dweb:/ipfs/QmbZaJyXdpsYGykVhHH9qpVGQg9DGCxE2QufbCUy3daTgq\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"methods": {}
					}
				}
			}
		},
		"sources": {
			"21-Advanced-Solidity/1/05-Stu_XP_Token.sol": {
				"ast": {
					"absolutePath": "21-Advanced-Solidity/1/05-Stu_XP_Token.sol",
					"exportedSymbols": {
						"XP_Token": [
							122
						]
					},
					"id": 123,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "3219:23:0"
						},
						{
							"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol",
							"file": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol",
							"id": 2,
							"nodeType": "ImportDirective",
							"scope": 123,
							"sourceUnit": 310,
							"src": "3320:112:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": null,
							"fullyImplemented": true,
							"id": 122,
							"linearizedBaseContracts": [
								122
							],
							"name": "XP_Token",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 5,
									"libraryName": {
										"contractScope": null,
										"id": 3,
										"name": "SafeMath",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 309,
										"src": "3582:8:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_SafeMath_$309",
											"typeString": "library SafeMath"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "3576:24:0",
									"typeName": {
										"id": 4,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "3595:4:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"constant": false,
									"id": 9,
									"name": "owner",
									"nodeType": "VariableDeclaration",
									"scope": 122,
									"src": "3690:34:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address_payable",
										"typeString": "address payable"
									},
									"typeName": {
										"id": 6,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "3690:15:0",
										"stateMutability": "payable",
										"typeDescriptions": {
											"typeIdentifier": "t_address_payable",
											"typeString": "address payable"
										}
									},
									"value": {
										"argumentTypes": null,
										"expression": {
											"argumentTypes": null,
											"id": 7,
											"name": "msg",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 324,
											"src": "3714:3:0",
											"typeDescriptions": {
												"typeIdentifier": "t_magic_message",
												"typeString": "msg"
											}
										},
										"id": 8,
										"isConstant": false,
										"isLValue": false,
										"isPure": false,
										"lValueRequested": false,
										"memberName": "sender",
										"nodeType": "MemberAccess",
										"referencedDeclaration": null,
										"src": "3714:10:0",
										"typeDescriptions": {
											"typeIdentifier": "t_address_payable",
											"typeString": "address payable"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 12,
									"name": "symbol",
									"nodeType": "VariableDeclaration",
									"scope": 122,
									"src": "3731:28:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 10,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "3731:6:0",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"value": {
										"argumentTypes": null,
										"hexValue": "585054",
										"id": 11,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "string",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "3754:5:0",
										"subdenomination": null,
										"typeDescriptions": {
											"typeIdentifier": "t_stringliteral_3fd5c7ceb9eb265f50afdebfde1e7a46955f68e064fa51febb0dde4f4cadcdaa",
											"typeString": "literal_string \"XPT\""
										},
										"value": "XPT"
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 15,
									"name": "exchange_rate",
									"nodeType": "VariableDeclaration",
									"scope": 122,
									"src": "3766:31:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 13,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "3766:4:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"argumentTypes": null,
										"hexValue": "313030",
										"id": 14,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "3794:3:0",
										"subdenomination": null,
										"typeDescriptions": {
											"typeIdentifier": "t_rational_100_by_1",
											"typeString": "int_const 100"
										},
										"value": "100"
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 19,
									"name": "balances",
									"nodeType": "VariableDeclaration",
									"scope": 122,
									"src": "3904:34:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 18,
										"keyType": {
											"id": 16,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "3913:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "3904:25:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 17,
											"name": "uint",
											"nodeType": "ElementaryTypeName",
											"src": "3924:4:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"value": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 29,
										"nodeType": "Block",
										"src": "4066:46:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"baseExpression": {
														"argumentTypes": null,
														"id": 24,
														"name": "balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 19,
														"src": "4084:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 27,
													"indexExpression": {
														"argumentTypes": null,
														"expression": {
															"argumentTypes": null,
															"id": 25,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 324,
															"src": "4093:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 26,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "4093:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4084:20:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 23,
												"id": 28,
												"nodeType": "Return",
												"src": "4077:27:0"
											}
										]
									},
									"documentation": null,
									"id": 30,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 20,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4038:2:0"
									},
									"returnParameters": {
										"id": 23,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 22,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 30,
												"src": "4061:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 21,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "4061:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4060:6:0"
									},
									"scope": 122,
									"src": "4022:90:0",
									"stateMutability": "view",
									"superFunction": null,
									"visibility": "public"
								},
								{
									"body": {
										"id": 61,
										"nodeType": "Block",
										"src": "4280:146:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 48,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 37,
															"name": "balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 19,
															"src": "4291:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 40,
														"indexExpression": {
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 38,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 324,
																"src": "4300:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 39,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "4300:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "4291:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"id": 46,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 34,
																"src": "4339:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"argumentTypes": null,
																"baseExpression": {
																	"argumentTypes": null,
																	"id": 41,
																	"name": "balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 19,
																	"src": "4314:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 44,
																"indexExpression": {
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"id": 42,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 324,
																		"src": "4323:3:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 43,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": null,
																	"src": "4323:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "4314:20:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 45,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sub",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 165,
															"src": "4314:24:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 47,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4314:31:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4291:54:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 49,
												"nodeType": "ExpressionStatement",
												"src": "4291:54:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 59,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 50,
															"name": "balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 19,
															"src": "4356:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 52,
														"indexExpression": {
															"argumentTypes": null,
															"id": 51,
															"name": "recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 32,
															"src": "4365:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "4356:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"id": 57,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 34,
																"src": "4402:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"argumentTypes": null,
																"baseExpression": {
																	"argumentTypes": null,
																	"id": 53,
																	"name": "balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 19,
																	"src": "4378:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 55,
																"indexExpression": {
																	"argumentTypes": null,
																	"id": 54,
																	"name": "recipient",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 32,
																	"src": "4387:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "4378:19:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 56,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 149,
															"src": "4378:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 58,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4378:30:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4356:52:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 60,
												"nodeType": "ExpressionStatement",
												"src": "4356:52:0"
											}
										]
									},
									"documentation": null,
									"id": 62,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 35,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 32,
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 62,
												"src": "4242:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 31,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4242:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 34,
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 62,
												"src": "4261:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 33,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "4261:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4241:31:0"
									},
									"returnParameters": {
										"id": 36,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4280:0:0"
									},
									"scope": 122,
									"src": "4223:203:0",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "public"
								},
								{
									"body": {
										"id": 93,
										"nodeType": "Block",
										"src": "4578:165:0",
										"statements": [
											{
												"assignments": [
													66
												],
												"declarations": [
													{
														"constant": false,
														"id": 66,
														"name": "amount",
														"nodeType": "VariableDeclaration",
														"scope": 93,
														"src": "4589:11:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 65,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "4589:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 72,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 70,
															"name": "exchange_rate",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 15,
															"src": "4617:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 67,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 324,
																"src": "4603:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 68,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "value",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "4603:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 69,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "mul",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 226,
														"src": "4603:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 71,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4603:28:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4589:42:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 84,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 73,
															"name": "balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 19,
															"src": "4644:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 76,
														"indexExpression": {
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 74,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 324,
																"src": "4653:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 75,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "4653:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "4644:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"id": 82,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 66,
																"src": "4692:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"argumentTypes": null,
																"baseExpression": {
																	"argumentTypes": null,
																	"id": 77,
																	"name": "balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 19,
																	"src": "4667:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 80,
																"indexExpression": {
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"id": 78,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 324,
																		"src": "4676:3:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 79,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": null,
																	"src": "4676:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "4667:20:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 81,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 149,
															"src": "4667:24:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 83,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4667:32:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4644:55:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 85,
												"nodeType": "ExpressionStatement",
												"src": "4644:55:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 89,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 324,
																"src": "4725:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 90,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "value",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "4725:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"argumentTypes": null,
															"id": 86,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 9,
															"src": "4710:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"id": 88,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "4710:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 91,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4710:25:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 92,
												"nodeType": "ExpressionStatement",
												"src": "4710:25:0"
											}
										]
									},
									"documentation": null,
									"id": 94,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "purchase",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 63,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4560:2:0"
									},
									"returnParameters": {
										"id": 64,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4578:0:0"
									},
									"scope": 122,
									"src": "4543:200:0",
									"stateMutability": "payable",
									"superFunction": null,
									"visibility": "public"
								},
								{
									"body": {
										"id": 120,
										"nodeType": "Block",
										"src": "4899:140:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															"id": 105,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"id": 102,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 324,
																	"src": "4919:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 103,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "4919:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"id": 104,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 9,
																"src": "4933:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "4919:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "596f7520617265206e6f7420746865206f776e6572212121",
															"id": 106,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4939:26:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_df097322c7a8350888fa5f4a86ec0492c8b9b9a30c7784a26ca1b1a70adcc506",
																"typeString": "literal_string \"You are not the owner!!!\""
															},
															"value": "You are not the owner!!!"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_df097322c7a8350888fa5f4a86ec0492c8b9b9a30c7784a26ca1b1a70adcc506",
																"typeString": "literal_string \"You are not the owner!!!\""
															}
														],
														"id": 101,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															327,
															328
														],
														"referencedDeclaration": 328,
														"src": "4910:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 107,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4910:56:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 108,
												"nodeType": "ExpressionStatement",
												"src": "4910:56:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 118,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 109,
															"name": "balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 19,
															"src": "4979:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 111,
														"indexExpression": {
															"argumentTypes": null,
															"id": 110,
															"name": "recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 96,
															"src": "4988:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "4979:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"id": 116,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 98,
																"src": "5025:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"argumentTypes": null,
																"baseExpression": {
																	"argumentTypes": null,
																	"id": 112,
																	"name": "balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 19,
																	"src": "5001:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 114,
																"indexExpression": {
																	"argumentTypes": null,
																	"id": 113,
																	"name": "recipient",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 96,
																	"src": "5010:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "5001:19:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 115,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 149,
															"src": "5001:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 117,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5001:30:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4979:52:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 119,
												"nodeType": "ExpressionStatement",
												"src": "4979:52:0"
											}
										]
									},
									"documentation": null,
									"id": 121,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mint",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 99,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 96,
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 121,
												"src": "4862:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 95,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4862:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 98,
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 121,
												"src": "4881:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 97,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "4881:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4861:31:0"
									},
									"returnParameters": {
										"id": 100,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4899:0:0"
									},
									"scope": 122,
									"src": "4848:191:0",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "public"
								}
							],
							"scope": 123,
							"src": "3436:1615:0"
						}
					],
					"src": "3219:1834:0"
				},
				"id": 0
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol": {
				"ast": {
					"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol",
					"exportedSymbols": {
						"SafeMath": [
							309
						]
					},
					"id": 310,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 124,
							"literals": [
								"solidity",
								"^",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "0:23:1"
						},
						{
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": "@dev Wrappers over Solidity's arithmetic operations with added overflow\nchecks.\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\nin bugs, because programmers usually assume that an overflow raises an\nerror, which is the standard behavior in high level programming languages.\n`SafeMath` restores this intuition by reverting the transaction when an\noperation overflows.\n * Using this library instead of the unchecked operations eliminates an entire\nclass of bugs, so it's recommended to use it always.",
							"fullyImplemented": true,
							"id": 309,
							"linearizedBaseContracts": [
								309
							],
							"name": "SafeMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 148,
										"nodeType": "Block",
										"src": "901:109:1",
										"statements": [
											{
												"assignments": [
													134
												],
												"declarations": [
													{
														"constant": false,
														"id": 134,
														"name": "c",
														"nodeType": "VariableDeclaration",
														"scope": 148,
														"src": "911:9:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 133,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "911:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 138,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 137,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 135,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 126,
														"src": "923:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"argumentTypes": null,
														"id": 136,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 128,
														"src": "927:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "923:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "911:17:1"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 142,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 140,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 134,
																"src": "946:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 141,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 126,
																"src": "951:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "946:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206164646974696f6e206f766572666c6f77",
															"id": 143,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "954:29:1",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
																"typeString": "literal_string \"SafeMath: addition overflow\""
															},
															"value": "SafeMath: addition overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
																"typeString": "literal_string \"SafeMath: addition overflow\""
															}
														],
														"id": 139,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															327,
															328
														],
														"referencedDeclaration": 328,
														"src": "938:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 144,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "938:46:1",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 145,
												"nodeType": "ExpressionStatement",
												"src": "938:46:1"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 146,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 134,
													"src": "1002:1:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 132,
												"id": 147,
												"nodeType": "Return",
												"src": "995:8:1"
											}
										]
									},
									"documentation": "@dev Returns the addition of two unsigned integers, reverting on\noverflow.\n     * Counterpart to Solidity's `+` operator.\n     * Requirements:\n- Addition cannot overflow.",
									"id": 149,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 129,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 126,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 149,
												"src": "847:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 125,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "847:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 128,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 149,
												"src": "858:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 127,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "858:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "846:22:1"
									},
									"returnParameters": {
										"id": 132,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 131,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 149,
												"src": "892:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 130,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "892:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "891:9:1"
									},
									"scope": 309,
									"src": "834:176:1",
									"stateMutability": "pure",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 164,
										"nodeType": "Block",
										"src": "1341:67:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 159,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 151,
															"src": "1362:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"id": 160,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 153,
															"src": "1365:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a207375627472616374696f6e206f766572666c6f77",
															"id": 161,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1368:32:1",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
																"typeString": "literal_string \"SafeMath: subtraction overflow\""
															},
															"value": "SafeMath: subtraction overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
																"typeString": "literal_string \"SafeMath: subtraction overflow\""
															}
														],
														"id": 158,
														"name": "sub",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															165,
															192
														],
														"referencedDeclaration": 192,
														"src": "1358:3:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
														}
													},
													"id": 162,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1358:43:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 157,
												"id": 163,
												"nodeType": "Return",
												"src": "1351:50:1"
											}
										]
									},
									"documentation": "@dev Returns the subtraction of two unsigned integers, reverting on\noverflow (when the result is negative).\n     * Counterpart to Solidity's `-` operator.\n     * Requirements:\n- Subtraction cannot overflow.",
									"id": 165,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 154,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 151,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 165,
												"src": "1287:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 150,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1287:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 153,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 165,
												"src": "1298:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 152,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1298:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1286:22:1"
									},
									"returnParameters": {
										"id": 157,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 156,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 165,
												"src": "1332:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 155,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1332:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1331:9:1"
									},
									"scope": 309,
									"src": "1274:134:1",
									"stateMutability": "pure",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 191,
										"nodeType": "Block",
										"src": "1827:92:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 179,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 177,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 169,
																"src": "1845:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 178,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 167,
																"src": "1850:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1845:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"id": 180,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 171,
															"src": "1853:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 176,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															327,
															328
														],
														"referencedDeclaration": 328,
														"src": "1837:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 181,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1837:29:1",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 182,
												"nodeType": "ExpressionStatement",
												"src": "1837:29:1"
											},
											{
												"assignments": [
													184
												],
												"declarations": [
													{
														"constant": false,
														"id": 184,
														"name": "c",
														"nodeType": "VariableDeclaration",
														"scope": 191,
														"src": "1876:9:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 183,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1876:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 188,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 187,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 185,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 167,
														"src": "1888:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"argumentTypes": null,
														"id": 186,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 169,
														"src": "1892:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1888:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1876:17:1"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 189,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 184,
													"src": "1911:1:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 175,
												"id": 190,
												"nodeType": "Return",
												"src": "1904:8:1"
											}
										]
									},
									"documentation": "@dev Returns the subtraction of two unsigned integers, reverting with custom message on\noverflow (when the result is negative).\n     * Counterpart to Solidity's `-` operator.\n     * Requirements:\n- Subtraction cannot overflow.\n     * _Available since v2.4.0._",
									"id": 192,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 172,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 167,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 192,
												"src": "1745:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 166,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1745:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 169,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 192,
												"src": "1756:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 168,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1756:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 171,
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 192,
												"src": "1767:26:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 170,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1767:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1744:50:1"
									},
									"returnParameters": {
										"id": 175,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 174,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 192,
												"src": "1818:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 173,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1818:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1817:9:1"
									},
									"scope": 309,
									"src": "1732:187:1",
									"stateMutability": "pure",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 225,
										"nodeType": "Block",
										"src": "2226:392:1",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 203,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 201,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 194,
														"src": "2458:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 202,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2463:1:1",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2458:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 207,
												"nodeType": "IfStatement",
												"src": "2454:45:1",
												"trueBody": {
													"id": 206,
													"nodeType": "Block",
													"src": "2466:33:1",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 204,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2487:1:1",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 200,
															"id": 205,
															"nodeType": "Return",
															"src": "2480:8:1"
														}
													]
												}
											},
											{
												"assignments": [
													209
												],
												"declarations": [
													{
														"constant": false,
														"id": 209,
														"name": "c",
														"nodeType": "VariableDeclaration",
														"scope": 225,
														"src": "2509:9:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 208,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2509:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 213,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 212,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 210,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 194,
														"src": "2521:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"argumentTypes": null,
														"id": 211,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 196,
														"src": "2525:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2521:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2509:17:1"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 219,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 217,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"id": 215,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 209,
																	"src": "2544:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"argumentTypes": null,
																	"id": 216,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 194,
																	"src": "2548:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2544:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"id": 218,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 196,
																"src": "2553:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2544:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77",
															"id": 220,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2556:35:1",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
																"typeString": "literal_string \"SafeMath: multiplication overflow\""
															},
															"value": "SafeMath: multiplication overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
																"typeString": "literal_string \"SafeMath: multiplication overflow\""
															}
														],
														"id": 214,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															327,
															328
														],
														"referencedDeclaration": 328,
														"src": "2536:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 221,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2536:56:1",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 222,
												"nodeType": "ExpressionStatement",
												"src": "2536:56:1"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 223,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 209,
													"src": "2610:1:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 200,
												"id": 224,
												"nodeType": "Return",
												"src": "2603:8:1"
											}
										]
									},
									"documentation": "@dev Returns the multiplication of two unsigned integers, reverting on\noverflow.\n     * Counterpart to Solidity's `*` operator.\n     * Requirements:\n- Multiplication cannot overflow.",
									"id": 226,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mul",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 197,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 194,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 226,
												"src": "2172:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 193,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2172:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 196,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 226,
												"src": "2183:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 195,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2183:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2171:22:1"
									},
									"returnParameters": {
										"id": 200,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 199,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 226,
												"src": "2217:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 198,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2217:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2216:9:1"
									},
									"scope": 309,
									"src": "2159:459:1",
									"stateMutability": "pure",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 241,
										"nodeType": "Block",
										"src": "3140:63:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 236,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 228,
															"src": "3161:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"id": 237,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 230,
															"src": "3164:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206469766973696f6e206279207a65726f",
															"id": 238,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3167:28:1",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
																"typeString": "literal_string \"SafeMath: division by zero\""
															},
															"value": "SafeMath: division by zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
																"typeString": "literal_string \"SafeMath: division by zero\""
															}
														],
														"id": 235,
														"name": "div",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															242,
															269
														],
														"referencedDeclaration": 269,
														"src": "3157:3:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
														}
													},
													"id": 239,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3157:39:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 234,
												"id": 240,
												"nodeType": "Return",
												"src": "3150:46:1"
											}
										]
									},
									"documentation": "@dev Returns the integer division of two unsigned integers. Reverts on\ndivision by zero. The result is rounded towards zero.\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n`revert` opcode (which leaves remaining gas untouched) while Solidity\nuses an invalid opcode to revert (consuming all remaining gas).\n     * Requirements:\n- The divisor cannot be zero.",
									"id": 242,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 231,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 228,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 242,
												"src": "3086:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 227,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3086:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 230,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 242,
												"src": "3097:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 229,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3097:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3085:22:1"
									},
									"returnParameters": {
										"id": 234,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 233,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 242,
												"src": "3131:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 232,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3131:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3130:9:1"
									},
									"scope": 309,
									"src": "3073:130:1",
									"stateMutability": "pure",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 268,
										"nodeType": "Block",
										"src": "3813:243:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 256,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 254,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 246,
																"src": "3897:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 255,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3901:1:1",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "3897:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"id": 257,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 248,
															"src": "3904:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 253,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															327,
															328
														],
														"referencedDeclaration": 328,
														"src": "3889:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 258,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3889:28:1",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 259,
												"nodeType": "ExpressionStatement",
												"src": "3889:28:1"
											},
											{
												"assignments": [
													261
												],
												"declarations": [
													{
														"constant": false,
														"id": 261,
														"name": "c",
														"nodeType": "VariableDeclaration",
														"scope": 268,
														"src": "3927:9:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 260,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3927:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 265,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 264,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 262,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 244,
														"src": "3939:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"argumentTypes": null,
														"id": 263,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 246,
														"src": "3943:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3939:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3927:17:1"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 266,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 261,
													"src": "4048:1:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 252,
												"id": 267,
												"nodeType": "Return",
												"src": "4041:8:1"
											}
										]
									},
									"documentation": "@dev Returns the integer division of two unsigned integers. Reverts with custom message on\ndivision by zero. The result is rounded towards zero.\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n`revert` opcode (which leaves remaining gas untouched) while Solidity\nuses an invalid opcode to revert (consuming all remaining gas).\n     * Requirements:\n- The divisor cannot be zero.\n     * _Available since v2.4.0._",
									"id": 269,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 249,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 244,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 269,
												"src": "3731:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 243,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3731:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 246,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 269,
												"src": "3742:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 245,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3742:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 248,
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 269,
												"src": "3753:26:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 247,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3753:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3730:50:1"
									},
									"returnParameters": {
										"id": 252,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 251,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 269,
												"src": "3804:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 250,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3804:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3803:9:1"
									},
									"scope": 309,
									"src": "3718:338:1",
									"stateMutability": "pure",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 284,
										"nodeType": "Block",
										"src": "4567:61:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 279,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 271,
															"src": "4588:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"id": 280,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 273,
															"src": "4591:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206d6f64756c6f206279207a65726f",
															"id": 281,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4594:26:1",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832",
																"typeString": "literal_string \"SafeMath: modulo by zero\""
															},
															"value": "SafeMath: modulo by zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832",
																"typeString": "literal_string \"SafeMath: modulo by zero\""
															}
														],
														"id": 278,
														"name": "mod",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															285,
															308
														],
														"referencedDeclaration": 308,
														"src": "4584:3:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
														}
													},
													"id": 282,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4584:37:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 277,
												"id": 283,
												"nodeType": "Return",
												"src": "4577:44:1"
											}
										]
									},
									"documentation": "@dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\nReverts when dividing by zero.\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\nopcode (which leaves remaining gas untouched) while Solidity uses an\ninvalid opcode to revert (consuming all remaining gas).\n     * Requirements:\n- The divisor cannot be zero.",
									"id": 285,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 274,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 271,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 285,
												"src": "4513:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 270,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4513:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 273,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 285,
												"src": "4524:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 272,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4524:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4512:22:1"
									},
									"returnParameters": {
										"id": 277,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 276,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 285,
												"src": "4558:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 275,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4558:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4557:9:1"
									},
									"scope": 309,
									"src": "4500:128:1",
									"stateMutability": "pure",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 307,
										"nodeType": "Block",
										"src": "5227:68:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 299,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 297,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 289,
																"src": "5245:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 298,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5250:1:1",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "5245:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"id": 300,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 291,
															"src": "5253:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 296,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															327,
															328
														],
														"referencedDeclaration": 328,
														"src": "5237:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 301,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5237:29:1",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 302,
												"nodeType": "ExpressionStatement",
												"src": "5237:29:1"
											},
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 305,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 303,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 287,
														"src": "5283:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"argumentTypes": null,
														"id": 304,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 289,
														"src": "5287:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5283:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 295,
												"id": 306,
												"nodeType": "Return",
												"src": "5276:12:1"
											}
										]
									},
									"documentation": "@dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\nReverts with custom message when dividing by zero.\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\nopcode (which leaves remaining gas untouched) while Solidity uses an\ninvalid opcode to revert (consuming all remaining gas).\n     * Requirements:\n- The divisor cannot be zero.\n     * _Available since v2.4.0._",
									"id": 308,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 292,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 287,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 308,
												"src": "5145:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 286,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5145:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 289,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 308,
												"src": "5156:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 288,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5156:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 291,
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 308,
												"src": "5167:26:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 290,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5167:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5144:50:1"
									},
									"returnParameters": {
										"id": 295,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 294,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 308,
												"src": "5218:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 293,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5218:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5217:9:1"
									},
									"scope": 309,
									"src": "5132:163:1",
									"stateMutability": "pure",
									"superFunction": null,
									"visibility": "internal"
								}
							],
							"scope": 310,
							"src": "589:4708:1"
						}
					],
					"src": "0:5298:1"
				},
				"id": 1
			}
		}
	}
}